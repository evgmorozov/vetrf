
Перем Неопределено;

Перем оПривязки;
Перем тпЗакладки;
Перем тпОтбор;
Перем выбХозСубъект, выбДокумент;
Перем выбМинДатаИзготовления;
//===========================================================

///******************************** ADirks 06.12.2019 ************
Процедура ПриОтжатииЛевойКнопки(Сост, Лево, Верх, ФСО) Экспорт
	Если тпОтбор <> Неопределено Тогда
		Если тпОтбор._ПриОтжатииЛевойКнопки(Сост, Лево, Верх, ФСО) = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 06.12.2019 ************

///******************************** ADirks 12.11.2019 ************
Функция стрДатаИзг()
	стрДатаИзг = ГМ.Преобразовать_СтрокаДата_в_ФормализованнаяДата(ДатаИзготовления1);
	Если ПустаяСтрока(ДатаИзготовления2) = 0 Тогда
		стрДатаИзг = стрДатаИзг + " - " + ГМ.Преобразовать_СтрокаДата_в_ФормализованнаяДата(ДатаИзготовления2);
	КонецЕсли;
	Возврат стрДатаИзг;
КонецФункции
///******************************** ADirks 12.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Процедура УстановитьСортировку()
	ТекСорт = тпОтбор.Сортировка();
	Если флВидСортировки = 1 Тогда
		Сорт = тпОтбор.Сортировка("Наименование");
	ИначеЕсли флВидСортировки = 2 Тогда
		Сорт = тпОтбор.Сортировка("ДатаИзготовления");
	ИначеЕсли флВидСортировки = 3 Тогда
		Сорт = тпОтбор.Сортировка("ГоденДо");
	ИначеЕсли флВидСортировки = 4 Тогда
		Сорт = тпОтбор.Сортировка("ДатаИзменения");
	ИначеЕсли флВидСортировки = 5 Тогда
		Сорт = тпОтбор.Сортировка("Количество");
	ИначеЕсли флВидСортировки = 6 Тогда
		Сорт = тпОтбор.Сортировка("Код");
	КонецЕсли;
	
	Если Сорт <> ТекСорт Тогда
		тпОтбор.УстановитьОтбор();
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 29.11.2019 ************
Процедура СчитатьПереданныеНастройки(сзПарам)
	//сзПарам//:СписокЗначений
	
	выбПродукция_Элемент = сзПарам.Получить("Продукция_Элемент");
	Если выбПродукция_Элемент = Неопределено Тогда
		выбПродукция_Элемент = сзПарам.Получить("ВСД_Продукция_Элемент");
	КонецЕсли;
	тпОтбор.Значение("Продукция_Элемент", выбПродукция_Элемент);

	
	тпОтбор.Значение("Продукция", сзПарам.Получить("Продукция"));
	тпОтбор.Значение("ВидПродукции", сзПарам.Получить("ВидПродукции"));


	выбПолучатель_Площадка = сзПарам.Получить("Получатель_Площадка");
	Если выбПолучатель_Площадка = Неопределено Тогда
		выбПолучатель_Площадка = сзПарам.Получить("Площадка");
	КонецЕсли;
	тпОтбор.Значение("Получатель_Площадка", выбПолучатель_Площадка);

	выбПолучатель_ХозСубъект = сзПарам.Получить("Получатель_ХозСубъект");
	Если выбПолучатель_ХозСубъект = Неопределено Тогда
		выбПолучатель_ХозСубъект = сзПарам.Получить("ХозСубъект");
	КонецЕсли;
	тпОтбор.Значение("Получатель_ХозСубъект", выбПолучатель_ХозСубъект);
	
	тпОтбор.Значение("ДатаИзготовления1", сзПарам.Получить("МинДатаИзготовления"));
КонецПроцедуры
///******************************** ADirks 29.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Процедура тпОтбор_Инит()
	тпОтбор = СоздатьОбъект("Меркурий.ТабличноеПоле.Фильтр.ФормаСписка");
	тпОтбор.Инит(Контекст, "тпОтбор", "ВСД_Партия");
	
	тпОтбор.Добавить("ТолькоАктуальные", "Только актуальные", "Флаг", "Спр.IsMark = 0 AND $Спр.active = 1", "Спр.ISMARK = ''");
	тпОтбор.ДобавитьПоКолонке("Наименование");
	тпОтбор.ДобавитьПоКолонке("Продукция_Элемент", "Продукция - элемент");
	
	тпОтбор.Добавить("ДатаИзготовления1", "Дата изготовления", "ДатаВСД", "$Спр.ДатаИзготовления1");
	тпОтбор.Добавить("ДатаСрокГодности1", "Срок годности", "ДатаВСД", "$Спр.ДатаСрокГодности1");

	тпОтбор.ДобавитьПоКолонке("Продукция");
	тпОтбор.ДобавитьПоКолонке("ВидПродукции", "Вид продукции");

	тпОтбор.Добавить("ОтборПоНоменклатуре", "Отбор по номенклатуре", "Справочник.Номенклатура", "СпрНом.ParentExt",,
		"LEFT JOIN $Справочник.ВСД_Номенклатура_Соответсвия СпрНом ON $СпрНом.ВСД_Продукция_Элемент = Спр.ID AND СпрНом.ISMARK = 0",
		"LEFT JOIN [Справочник.ВСД_Номенклатура_Соответсвия] СпрНом ON СпрНом.ВСД_Продукция_Элемент = Спр.ID AND СпрНом.ISMARK = ''"
	);

	тпОтбор.Добавить("Производитель_ХозСубъект", "Хоз.субъект - производитель", "Справочник.ВСД_ХозСубъект", "$спрПродЭл_Произв.Производитель_ХозСубъект",,
		"LEFT JOIN $Справочник.ВСД_Продукция_Элемент спрПродЭл_Произв ON спрПродЭл_Произв.ID = $Спр.Продукция_Элемент",
		"LEFT JOIN [Справочник.ВСД_Продукция_Элемент] спрПродЭл_Произв ON спрПродЭл_Произв.ID = Спр.Продукция_Элемент"
	);
	тпОтбор.ДобавитьПоКолонке("Производитель_Площадка", "Площадка изготовителя");

	тпОтбор.ДобавитьПоКолонке("Получатель_ХозСубъект", "Хоз.субъект - получатель");
	тпОтбор.ДобавитьПоКолонке("Получатель_Площадка", "Площадка получателя");
	
	тпОтбор.ДобавитьПоКолонке("НомерЗаписи", "Номер записи");


	тпОтбор.Пометка("ТолькоАктуальные", 1);
	тпОтбор.СвязаннаяКолонка("ДатаИзготовления1", "ДатаИзготовления1");
	тпОтбор.СвязаннаяКолонка("ДатаСрокГодности1", "ДатаСрокГодности1");
	
	тпОтбор.Владелец("ВидПродукции", "Продукция");
	
	тпОтбор.ДобавитьСортировку("ДатаИзготовления", "$Спр.ДатаИзготовления1", "Спр.ДатаИзготовления1",,);
	тпОтбор.ДобавитьСортировку("ГоденДо", "$Спр.ДатаСрокГодности1", "Спр.ДатаСрокГодности1",,);
	тпОтбор.ДобавитьСортировку("ДатаИзменения", "$Спр.ДатаИзменения", "Спр.ДатаИзменения",,);
	тпОтбор.ДобавитьСортировку("Количество", "$Спр.Количество", "Спр.Количество",,);
	тпОтбор.ДобавитьСортировку("Код", "Спр.Code", "Спр.Code",,);

	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		тпОтбор.фНеСохранятьНастройкиФильтров = 1;
		
		сзПарам = Форма.Параметр;
		СчитатьПереданныеНастройки(сзПарам);
	КонецЕсли;

	тпОтбор.Показать();
	//тпОтбор.ОбновитьСтроки();

	тпОтбор.УстановитьОтбор();
КонецПроцедуры
///******************************** ADirks 28.11.2019 ************

Процедура ОтборПоДокументу(ВыбДок)
	НовыйСписокОтбора = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(ВыбДок)=1 Тогда 

	Иначе
		СпрПартий = СоздатьОбъект("Справочник.ВСД_Партия");
		СпрПартий.ВыбратьЭлементыПоРеквизиту("ДокОснование",ВыбДок,0,0);
		Пока СпрПартий.ПолучитьЭлемент()=1 Цикл
			НовыйСписокОтбора.ДобавитьЗначение(СпрПартий.ТекущийЭлемент());
		КонецЦикла;

	КонецЕсли;
		
	ИспользоватьСписокЭлементов(НовыйСписокОтбора);
КонецПроцедуры


//======================================================================
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)
	Если тпОтбор.ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения) = 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ПриОткрытии()
	ГМ._ПриОткрытии(Контекст);

	Если Форма.МодальныйРежим() = 0 Тогда
		Попытка
			оПривязки.Привязка("рамкаСортировка,кнЗакрыть, кнЗагрузитьПартии", "T", "Форма");
			оПривязки.Привязка("флВидСортировки,флДатаИ,флДатаГ,флДатаИзменения,флКоличество,флКод", "T", "Форма");
			оПривязки.Привязка("тпОтбор,рамкаЗакладки", "T", "Форма", "W", "Форма");
			оПривязки.Привязка("МногострочнаяЧасть","H","Форма","W","Форма");
		Исключение
			Сообщить("Справочник ВСД_Партии - Не удалось инициализировать привязки");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ПриОткрытии

//======================================================================
Процедура ПриЗакрытии()
	Если ПустоеЗначение(тпОтбор) = 0 Тогда
		тпОтбор.СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры


//======================================================================
Процедура ПослеСозданияФормы()
	тпОтбор_Инит();
	
	Форма.ИспользоватьСлой("Общий,Отбор", 2);
КонецПроцедуры
	
//======================================================================
Процедура ПриИзмененииРазмераОкна(ТипСобытия, НовШирина, НовВысота) Экспорт
	ГМ._ПриИзмененииРазмераОкна(Контекст, ТипСобытия, НовШирина, НовВысота);
КонецПроцедуры

//======================================================================
Процедура ПослеОткрытия()
	ГМ._ПослеОткрытия(Контекст);
КонецПроцедуры

//======================================================================
Процедура ЗагрузитьПартии()
	ВыбПлощадка="";
	
	ВыбПлощадка = тпОтбор.Значение("Производитель_Площадка");
		
	Если ПустоеЗначение(ВыбПлощадка)=1 Тогда
		Сообщить("Выберите площадку","!");
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Ветис получение партий ");

	// 2.1
	ПартииНачало = ТекущаяДата()-30;
	ПартииОкончание = ТекущаяДата();
	Ненулевые = 1;
	если ВвестиДату(ПартииНачало,"Загрузить партии с :")=1 Тогда 
		Если ПустоеЗначение(ПартииНачало) = 1 Тогда
			//Все хотят
			ПартииНачало = "";
			ПартииОкончание = "";
			Ненулевые = 0;
			Сообщить("Ветис получение всех партий по площадке "+ВыбПлощадка);
		Иначе
			Сообщить("Ветис получение ненулевых партий по площадке "+СокрЛП(ВыбПлощадка.Наименование)+" за период "+ПериодСтр(ПартииНачало,ПартииОкончание));
		КонецЕсли;
		Состояние("Ветис получение партий 2.1");
		ГМ2.ПолучитьПартии2(ВыбПлощадка, 0, 1,ПартииНачало, ПартииОкончание);
	КонецЕсли;
	
КонецПроцедуры

флВидСортировки = 1;
