 //+phsin@КБ99, 2016-08-15 15:02:17
Перем СписокДействий; // для механизма кнопки "Действия"
Перем ВыбФирма;
Перем ПараПараметров; // Для отправки из формы

Функция ПоказатьНомерПартии()
    Если Партия.Выбран() = 1 Тогда
        Возврат СокрЛП(Партия.НомерПартии);
	Иначе
		Возврат "";
    КонецЕсли;
КонецФункции

Процедура ПоказатьСписокВСД()
	ТзСписокВСД.очистить();
	Записать();
	ТзСписокВСД.Загрузить(ГМ.Выбрать_ВСД(ТекущийДокумент()));
	Если ТзСписокВСД.КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;
	ТзСписокВСД.НоваяКолонка("Статус","Строка",10);
	ТзСписокВСД.НоваяКолонка("Тип","Строка",10); 
	ТзСписокВСД.ВыбратьСтроки();
	Пока ТзСписокВСД.ПолучитьСтроку() = 1 Цикл
		ТзСписокВСД.Статус = ТзСписокВСД.док.Статус;
		ТзСписокВСД.Тип = ТзСписокВСД.док.ТипВСД;
	КонецЦикла;
	ТзСписокВСД.ТекущаяСтрока(1);
КонецПроцедуры

Процедура кликТзСписокВСД()
	Если ТзСписокВСД.КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;
    ОткрытьФорму(ТзСписокВСД.Док);
КонецПроцедуры


Процедура ПриВыбореФирмы()
	ГМ.Инициализация(Контекст);
	Отправитель_ХозСубъект = ГМ.СписокКонстант.Получить("Отправитель_ХозСубъект");
	Отправитель_Площадка = ГМ.СписокКонстант.Получить("Отправитель_Площадка");
	Перевозчик_ХозСубъект = ГМ.СписокКонстант.Получить("Перевозчик_ХозСубъект");
	Экспертиза = ГМ.СписокКонстант.Получить("ВСД_Экспертиза");
	Местность = ГМ.СписокКонстант.Получить("ВСД_Местность");
	Особыеотметки = ГМ.СписокКонстант.Получить("ВСД_ОсобыеОтметки");
КонецПроцедуры


//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());

		ФирмаИмяРеквизита = "";
		ГМ.ПолучитьИмяРеквизитаФирма(Вид(), ФирмаИмяРеквизита);
		Попытка УстановитьАтрибут(ФирмаИмяРеквизита, ВыбФирма);  Исключение КонецПопытки;

		ПриВыбореФирмы();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

Процедура ДоступностьЭлементов()
	Если Проведен()=1 Тогда 
		Форма.ТолькоПросмотр(1); 
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОтправить.Доступность(0);	
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(Скопирован)
	UUID = "";
	applicationID = "";
	Статус = "";
	Если Скопирован = 0 Тогда
		Попытка
			Фирма = ГМ.глЗначениеПоУмолчанию("ОсновнаяФирма");
			ПриВыбореФирмы();
			ТермическоеСостояние = ГМ.ПолучитьКонстанту("ТермУсловияПеревозки");
		Исключение КонецПопытки;
	КонецЕсли;

	Автор = ГМ.ПолучитьАвтора();
КонецПроцедуры
//
//Процедура ПослеОткрытия()
//	ГМ.Инициализация(Контекст);        
//КонецПроцедуры

Процедура ПриОткрытии()

	ГМ._ПриОткрытии(Контекст);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("ТабличнаяЧасть","Табличная часть");
	Форма.Закладки.ДобавитьЗначение("ВСД", "ВСД");
	//глАктивизироватьРеквизит(Контекст);		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	
	ПриЗаписиПерепроводить(1);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности"); 
	СписокДействий.ДобавитьЗначение("История");
	
	ДоступностьЭлементов();
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли ЗначениеЗакладки="ТабличнаяЧасть" Тогда
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	ИначеЕсли ЗначениеЗакладки="ВСД" Тогда
		Форма.ИспользоватьСлой("Шапка,ВСД,Подвал");
		ПоказатьСписокВСД();
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	ГМ.ПечатьСокрВСД( ТекущийДокумент() );
	
КонецПроцедуры // ПоКнопкеПечать()

Процедура ПриВыбореПартии()
	Продукция = Партия.Продукция;
	ВидПродукции = Партия.ВидПродукции;
	ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	ФормаУпаковки = Партия.ФормаУпаковки;
	НаименованиеПродукции = Партия.НаименованиеПродукции;
	Продукция_Элемент = Партия.Продукция_Элемент;
КонецПроцедуры

Процедура ОткрытьПартии()
	ОткрытьФормуМодально("Справочник.ВСД_Партия", ТекущийДокумент());	
КонецПроцедуры


//******************************************************************************
//******************************   ОТПРАВКА 
Процедура Отправить()
	Записать();
	
	Если Проведен()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПометкаУдаления()=1 Тогда 
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(applicationID)=0 Тогда 
		Если Вопрос("Документ уже был отправлен, отправить ПОВТОРНО?",4,30)<>6 Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Меркурий отправка ВСД транзакция "+НомерДок+" от "+ДатаДок);
	
    ПараПараметров = СоздатьОбъект("СписокЗначений");
    ПараПараметров.Установить("КонтекстДокумента", Контекст);
	ПараПараметров.Установить("ГМ", ГМ);
   
    ОткрытьФорму("Отчет", ПараПараметров, ГМ.ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");
   	
КонецПроцедуры

// ** сервисные для ввода на основании реализации 

Функция НайтиВСД_Транзакция(Докум)
	//Продумать, что делать с Rejected Документами
	Рез ="";
	
	ДокТ = СоздатьОбъект("Документ");
	ДокТ.ВыбратьПодчиненныедокументы(,,Докум.ТекущийДокумент());
	Пока ДокТ.ПолучитьДокумент()=1 Цикл
	    Если (ДокТ.Вид() = "ВСД_транзакция") и (ДокТ.ПометкаУдаления()=0) Тогда
			Если (ПустоеЗначение(ДокТ.Статус)=1) или (СокрЛП(докТ.Статус) = "COMPLETED") Тогда
	        	Рез = ДокТ.текущийДокумент();
				Прервать;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции // ()


//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	
	// либо Вид Основания подтягивать из настроек
	// Поищем есть ли уже введенный и проведенный
	Рез = НайтиВСД_Транзакция(ДокументОснование);
	Если ПустоеЗначение(Рез) =  0 Тогда
		ОткрытьФорму(Рез,"");
		СтатусВозврата(0); Возврат;
	КонецЕсли;		
	
	ГМ.ЗаполнитьВСД_Транзакция(Контекст, ДокументОснование);
	
	//Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
	//	ОткрытьФорму(ДокСсылка);
	//    СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;	
	
	//Если ГМ._ВводНаОсновании(Контекст, ДокументОснование) = 0 Тогда
	//    СтатусВозврата(0); Возврат;
	//КонецЕсли;
	//	
	//ТЗПартий = ГМ.ЗаполнитьПартииПоТЧДокумента2( ДокументОснование, Отправитель_Площадка, Отправитель_ХозСубъект );
	//Если ТЗПартий.КоличествоСтрок()=0 Тогда
	//    Сообщить("Нет партий для списания");
	//КонецЕсли;
	//
	//ДокСсылка = ЗаполнитьВСДТранзакция(ДокументОснование,ТЗПартий);
	//Если ПустоеЗначение(ДокСсылка)  = 0 Тогда
	//	ОткрытьФорму(ДокСсылка);
	//    СтатусВозврата(0); 
	//КонецЕсли;
КонецПроцедуры // ВводНаОсновании()


Процедура ПриЗакрытии()
   Если ТипЗначенияСтр(ПараПараметров) = "ГрупповойКонтекст" Тогда
// форма обработки открыта
      ПараПараметров.Форма.Закрыть();
// закрываем форму обработки
   КонецЕсли;
КонецПроцедуры // ПриЗакрытии


Процедура ДействияВСД()
	
	//меню
	СписокДействийВСД = СоздатьОбъект("СписокЗначений");
	СписокДействийВСД.ДобавитьЗначение("ПогаситьВСД","Погасить ВСД");
	СписокДействийВСД.ДобавитьЗначение("СписокВСД","Список ВСД");
	СписокДействийВСД.ДобавитьЗначение("ПечатьСокрФормыВСД","Печать сокращенной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД","Печать полной формы");
	СписокДействийВСД.ДобавитьЗначение("ПечатьПолнойФормыВСД_Тест","Печать полной формы ТЕСТ");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьВсдВГис","Открыть ВСД в ГИС");
	СписокДействийВСД.ДобавитьЗначение("ОтправитьВСД","Отправить ВСД");
//	СписокДействийВСД.ДобавитьЗначение("АннулироватьВСД","Аннулировать ВСД");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьЗапрос","Открыть Запрос");
	СписокДействийВСД.ДобавитьЗначение("ОткрытьОтвет","Открыть Ответ");	
	СписокДействийВСД.ДобавитьЗначение("ПолучитьОтветВетис","Получить ответ ВЕТИС");
	
	стр=0; Зн="";
	Если СписокДействийВСД.ВыбратьЗначение(Зн, "", стр, 60, 1) = 1 Тогда
		
		Если Зн ="ПогаситьВСД"  Тогда 
			ГМ.ПогаситьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД" Тогда 
			ГМ.ПечатьВСД(ТекущийДокумент());
		ИначеЕсли Зн = "ПечатьПолнойФормыВСД_Тест" Тогда 
			ГМ.ПечатьВСД_Тест(ТекущийДокумент());
		ИначеЕсли Зн = "ОткрытьВсдВГис" Тогда
			ГМ.ОткрытьВсдВГис( ТекущийДокумент() );		
		ИначеЕсли Зн = "СписокВСД" Тогда
			ГМ.ОткрытьСписокВсд( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОтправитьВСД" Тогда 
			Отправить();
		ИначеЕсли Зн = "АннулироватьВСД" Тогда 
			ГМ.Аннулировать_ВСД_транзакция( ТекущийДокумент() );
		ИначеЕсли Зн = "ОткрытьЗапрос" Тогда 
			ГМ.ОткрытьЗапрос( ТекущийДокумент() );		
		ИначеЕсли Зн = "ОткрытьОтвет" Тогда 
			ГМ.ОткрытьОтвет( ТекущийДокумент() );
		ИначеЕсли Зн = "ПечатьСокрФормыВСД" Тогда 
   			ОткрытьФорму("Отчет", ТекущийДокумент(), ГМ.ПолучитьКонстанту("КаталогМодуля")+"ПечФорма_ВСД_Сокращенная.ert");
		ИначеЕсли Зн = "ПолучитьОтветВетис" Тогда 			
		   	ПараПараметров = СоздатьОбъект("СписокЗначений");
		   	ПараПараметров.Установить("КонтекстДокумента", Контекст);
		   	ПараПараметров.Установить("ГМ", ГМ);
			ПараПараметров.Установить("Действие", "ПолучитьОтвет");		   		   
		   	ОткрытьФорму("Отчет", ПараПараметров, ГМ.ПолучитьКонстанту("КаталогМодуля")+"ВСД_ОтправкаИзФормы.ert");		   			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,ФлагСтандОбр)
	Если ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
	ИначеЕсли ЭлементДиалога = "Получатель_Площадка" Тогда
		ВремЭлем = Получатель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагСтандОбр = 0;
    ИначеЕсли ЭлементДиалога = "Партия" Тогда
        парам = создатьОбъект("СписокЗначений");
        Парам.Установить("ВСД_Продукция_Элемент",Продукция_Элемент);
        Парам.Установить("Площадка",Отправитель_Площадка);
		Парам.Установить("ХозСубъект",Отправитель_ХозСубъект);
        ОткрытьФорму("Справочник.ВСД_Партия", Парам);
        ФлагСтандОбр = 0;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
Процедура ПриВыбореХС(Имя, ВыбХС)
	Если Имя = "Отправитель_ХозСубъект" Тогда
		Если Отправитель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Отправитель_Площадка = "";
		КонецЕсли;
	ИначеЕсли Имя = "Получатель_ХозСубъект" Тогда
		Если Получатель_Площадка.GuidХозСубъекта <> ВыбХС.GUID Тогда
			Получатель_Площадка = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриВыбореХС

//======================================================================
Процедура ПриИзмененииТермСписка()
//	ТермическоеСостояние = спТермУсловияПеревозки.ТекущаяСтрока();	
КонецПроцедуры // ПриИзмененииТермСписка

ВыбФирма = "";
