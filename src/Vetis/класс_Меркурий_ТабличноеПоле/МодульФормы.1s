
Перем Неопределено;

//Виртуальные коды клавиш
Перем VK_SHIFT Экспорт, VK_CTRL Экспорт, VK_ALT Экспорт;
Перем VK_BACKSPACE		Экспорт;
Перем VK_TAB			Экспорт;
Перем VK_ESC			Экспорт;
Перем VK_SPACE			Экспорт;
Перем VK_ENTER			Экспорт;
Перем VK_UP				Экспорт;
Перем VK_DOWN			Экспорт;
Перем VK_INSERT			Экспорт;
Перем VK_DELETE			Экспорт;
Перем VK_F1				Экспорт;
Перем VK_F2				Экспорт;
Перем VK_F3				Экспорт;
Перем VK_F4				Экспорт;
Перем VK_F5				Экспорт;
Перем VK_F6				Экспорт;
Перем VK_F7				Экспорт;
Перем VK_F8				Экспорт;
Перем VK_F9				Экспорт;
Перем VK_F11			Экспорт;

Перем VK_GREYPLUS		Экспорт;
Перем VK_GREYMINUS		Экспорт;
Перем VK_PLUS			Экспорт;
Перем VK_MINUS			Экспорт;

Перем цветКрасный Экспорт;
Перем цветЗеленый Экспорт;
Перем цветСиний Экспорт;
Перем цветСерый Экспорт;
Перем цветСветлоЖелтый Экспорт;
Перем цветЖелтый Экспорт;



Перем ФорматСумм Экспорт;

Перем ОсновнойШрифт;
Перем ШрифтЗаголовков;
Перем жЫрныйШрифт;
Перем Шрифт_Курсив;

Перем ИзменятьВидимостьКолонок Экспорт;
Перем ИмяНастройки Экспорт;
Перем фНеСохранятьПорядокКолонок Экспорт;
Перем фНеИзменятьВидимостьКолонок Экспорт;

Перем фИспользоватьСтандартныеСобытия;
Перем фИспользовтаьСобытияВоВсейФорме;
Перем КонтекстФормы;
Перем ИмяКнопки;

Перем сзФлажки;
Перем сзДаты;
Перем сзСуммы; 

Перем ИмяКолонки_Объект; //если задано, то в этой колонке берём объект для ОткрытьОбъект(), АктивизироватьОбъект() и .т.д.

Перем фПоказано;

Перем Подбор_Команда;
Перем Подбор_ДопПараметр;


Перем глПользователь;  //заглушка для синтакс-контроля
//===========================================================


//===========================================================
//=== Описание callback-методов =============================
//===========================================================
// - <ИмяКнопки>_Выбор(Источник, СтрТП, КолТП, ТипРегиона, ТипОбластиЯчейки). Необязательный.
//   Передает управление выбора в форму. Если функция формы вернет 1 дальнейшие 
//   обработки события производится не будут.
//
// - <ИмяКнопки>_ТекстВЯчейке(ДанныеСтроки, ИмяКолонки)
//   Если определен, то возвращает текст в указанной ячейке. Используется при копировании
//   содержимого ячейки в clipboard.
//
// Другие события, передаваемые в форму:
// - ДобавитьСтроку()
// - КопироватьСтроку()
// - УдалитьСтроку()
//
// - ЗаполнитьМеню(сзМеню)
// - ПриВыбореМеню(Действие)
//
// Имя обработчика события формируется как <ИмяКнопки>_<ИмяСобытия> или <ИмяКнопки><ИмяСобытия>
//===========================================================
//===========================================================

//_____________________________________________________________________________
Функция Сам(Конт) Возврат Конт; КонецФункции //:Контекст

///******************************** ADirks 30.11.2012 ************
// Проверяет наличие метода в контексте.
// Имя метода конструируется как <ИмяКонтрола>_<ИмяСобытия>,  <ИмяКонтрола><ИмяСобытия>
// Если метода в контексте нет, возвращает ""
Функция ИмяОбработчикаСобытия(ИмяКонтрола, ИмяСобытия) Экспорт
	оИнформатор = СоздатьОбъект("Информатор");

	ИмяМетода = ИмяКонтрола+"_"+ИмяСобытия;
	Если оИнформатор.МетодСуществует(КонтекстФормы, ИмяМетода) = 1 Тогда
		Возврат ИмяМетода;
	КонецЕсли;
	
	ИмяМетода = ИмяКонтрола+ИмяСобытия;
	Если оИнформатор.МетодСуществует(КонтекстФормы, ИмяМетода) = 1 Тогда
		Возврат ИмяМетода;
	КонецЕсли;

	Возврат "";
КонецФункции
///******************************** ADirks 30.11.2012 ************

///******************************** Павел  29.08.2012
Процедура ВыполнитьКоллБэкПроцедуру(ИмяМетода) Экспорт
	сзПарам = Сам(Контекст).ПолучитьСписокПараметров("ВыполнитьКоллБэкПроцедуру");
	
	оСервис = СоздатьОбъект("Сервис");
	оСервис.ВыполнитьПроцедуру(КонтекстФормы, ИмяМетода, сзПарам);
КонецПроцедуры
///******************************** Павел  29.08.2012

///******************************** Павел  29.08.2012
Функция ВыполнитьКоллБэкФункцию(ИмяМетода, Рез) Экспорт
	сзПарам = Сам(Контекст).ПолучитьСписокПараметров("ВыполнитьКоллБэкФункцию");
	
	оСервис = СоздатьОбъект("Сервис");
	Возврат оСервис.ВыполнитьФункцию(КонтекстФормы, ИмяМетода, сзПарам, Рез);
КонецФункции
///******************************** Павел  29.08.2012

///******************************** ADirks 07.08.2006
Функция СтрокуВСписок(_Стр_, Разделитель = ",", ОбрезатьПробелы = 0) Экспорт
	Перем Стр, Поз;
	Перем Сп, Зн;
	
	Сп = СоздатьОбъект("СписокЗначений");
	Стр = СтрЗаменить(_Стр_, Разделитель, РазделительСтрок);
	КоличествоСтрок = СтрКоличествоСтрок(Стр);
	Для н = 1 По КоличествоСтрок Цикл
		Зн = СтрПолучитьСтроку(Стр, н);
		Если ОбрезатьПробелы = 1 Тогда Зн = СокрЛП(Зн); КонецЕсли;
		Сп.ДобавитьЗначение(Зн, Зн);
	КонецЦикла;

	Возврат Сп;
КонецФункции
///******************************** ADirks 07.08.2006



///******************************** ADirks 08.06.2018 ************
Функция ТипРегиона_НеЗадан() Экспорт
	Возврат 0;
КонецФункции

Функция ТипРегиона_Заголовок() Экспорт
	Возврат 1;
КонецФункции

Функция ТипРегиона_Шапка() Экспорт
	Возврат 2;
КонецФункции

Функция ТипРегиона_Строки() Экспорт
	Возврат 3;
КонецФункции

Функция ТипРегиона_Подвал() Экспорт
	Возврат 4;
КонецФункции
///******************************** ADirks 08.06.2018 ************



///******************************** ADirks 28.07.2017 ************
Функция ОсновнойШрифт(Размер = -1) Экспорт
	Сам = Сам(Контекст);
	
	Если Размер = -1 Тогда
		Возврат Сам.Шрифт;
	КонецЕсли;
	
	Фабрика = СоздатьОбъект("ФабрикаОбъектов");
	
	ОсновнойШрифт = Неопределено;
	ШрифтЗаголовков = Неопределено;
	жЫрныйШрифт = Неопределено;
	Шрифт_Курсив = Неопределено;
	
	ОсновнойШрифт = Фабрика.Шрифт(Сам.Шрифт,, Размер);
	Сам.Шрифт = ОсновнойШрифт;
	
	Возврат ОсновнойШрифт;
КонецФункции

Функция ШрифтЗаголовков(Шрифт) Экспорт
	Сам = Сам(Контекст);
	
	ШрифтЗаголовков = Неопределено;
	ШрифтЗаголовков	= Шрифт;
	
	Если Сам.фПоказано() = 1 Тогда
		Колонки = Сам.Колонки; //:КолонкиТабличногоПоля
		нКолонок = Колонки.Количество();
		Для нКол = 0 По нКолонок-1 Цикл
			Колонки.Получить(нКол).ШрифтЗаголовка = ШрифтЗаголовков;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Шрифт;
КонецФункции

Функция жЫрныйШрифт() Экспорт
	Если жЫрныйШрифт = Неопределено Тогда
		Сам = Сам(Контекст);
		Фабрика = СоздатьОбъект("ФабрикаОбъектов");
		жЫрныйШрифт = Фабрика.Шрифт(Сам.Шрифт,,, 1);
	КонецЕсли;
	Возврат жЫрныйШрифт;
КонецФункции

Функция Шрифт_Курсив() Экспорт
	Если Шрифт_Курсив = Неопределено Тогда
		Сам = Сам(Контекст);
		Фабрика = СоздатьОбъект("ФабрикаОбъектов");
		Шрифт_Курсив = Фабрика.Шрифт(Сам.Шрифт,,,, 1);
	КонецЕсли;
	Возврат Шрифт_Курсив;
КонецФункции
///******************************** ADirks 28.07.2017 ************

Функция ПолучитьЦвет(Красный=0,Зеленый=0,Синий=0) Экспорт
// Формирует значение цвета из составляющих (RGB)
    Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции // ПолучитьЦвет

///******************************** Павел (RiK тел. 213-15-29) 02.07.2009
Процедура Конструктор()
	ФорматСумм = "Ч019.2. ";
	
	фИспользоватьСтандартныеСобытия = 1;
	фИспользовтаьСобытияВоВсейФорме = 0;
	ИзменятьВидимостьКолонок = 1;

	сзФлажки	= "";
	сзДаты		= "";
	сзСуммы		= "";
	фПоказано = 0;

	
	VK_SHIFT		= 16;
	VK_CTRL			= 17;
	VK_ALT			= 18;
	VK_BACKSPACE	= 8;
	VK_TAB			= 9;
	VK_ESC			= 27;
	VK_SPACE		= 32;
	VK_ENTER		= 13;
	VK_UP			= 38;
	VK_DOWN			= 40;
	VK_INSERT		= 45;
	VK_DELETE		= 46;
	VK_F1			= 112;
	VK_F2			= 113;
	VK_F3			= 114;
	VK_F4			= 115;
	VK_F5			= 116;
	VK_F6			= 117;
	VK_F7			= 118;
	VK_F8			= 119;
	VK_F9			= 120;
	VK_F11			= 122;
	VK_GREYPLUS		= 107; //0x6B;
	VK_GREYMINUS	= 109; //0x6D;
	VK_PLUS			= 187;
	VK_MINUS		= 189;

	цветКрасный = ПолучитьЦвет(255, 0, 0);
	цветСиний = ПолучитьЦвет(0, 0, 255);
	цветЗеленый = ПолучитьЦвет(0, 255, 0);
	цветСерый = ПолучитьЦвет(200, 200, 200);
	цветСветлоЖелтый = ПолучитьЦвет(255, 255, 223);
	цветЖелтый = ПолучитьЦвет(255, 255, 153);
КонецПроцедуры
///******************************** Павел (RiK тел. 213-15-29) 02.07.2009

///******************************** ADirks 27.05.2013 ************
Процедура Деструктор()
	Сам = Сам(Контекст);
	
	ШрифтЗаголовков = Неопределено;
	ОсновнойШрифт = Неопределено;
	жЫрныйШрифт = Неопределено;
	Шрифт_Курсив = Неопределено;
	
	Если ПустаяСтрока(ИмяНастройки) = 0 Тогда
		Если ТипЗначения(Сам.Колонки) <> 0 Тогда
			Попытка
				глПользователь.СохранитьНастройку(ИмяНастройки, "", Сам.СоздатьНастройку());
			Исключение
				Сообщить(ОписаниеОшибки(), "!");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 27.05.2013 ************

///******************************** Павел  01.12.2010
Процедура Инит(_Контекст, _ИмяКнопки) Экспорт
	Сам = Сам(Контекст);
	
	КонтекстФормы	= _Контекст;
	ИмяКнопки		= _ИмяКнопки;
	

	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(КонтекстФормы.Форма);
	оФорма.СоздатьЭлементУправления(Сам, ИмяКнопки);
	
	Сам.РежимВыделенияСтроки = 2;
	
	//Сам.ПолучитьБазовыйКласс("ТПерехватчик").Инит(_Контекст);
КонецПроцедуры	// Инит
///******************************** Павел  01.12.2010

///******************************** ADirks 15.08.2013 ************
//Виртуальная ф-ция для доступа к панели кнопок
Функция ПанельКнопок() Экспорт
	Возврат Неопределено;
КонецФункции
///******************************** ADirks 15.08.2013 ************

///******************************** ADirks 27.06.2012 ************
Процедура Показать() Экспорт
	Сам = Сам(Контекст);
	
	Если фПоказано <> 1 Тогда
		Если ПустаяСтрока(ИмяНастройки) = 0 Тогда
			Попытка
				Сам.ВосстановитьНастройки()
			Исключение
				Сообщить(ОписаниеОшибки(), "!");
			КонецПопытки;
		КонецЕсли;

		фПоказано = 1;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 27.06.2012 ************

///******************************** ADirks 27.06.2012 ************
Функция фПоказано(НовЗнач = -1) Экспорт
	ПредЗнач = фПоказано;
	Если НовЗнач <> -1 Тогда
		фПоказано = НовЗнач;
	КонецЕсли;
	Возврат ПредЗнач;
КонецФункции
///******************************** ADirks 27.06.2012 ************

///******************************** ADirks 24.05.2012 ************
Функция фАктивныйЭлемент() Экспорт
	Попытка
		АктивныйЭлемент = КонтекстФормы.Форма.АктивныйЭлемент();
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Если АктивныйЭлемент = ИмяКнопки Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции
///******************************** ADirks 24.05.2012 ************

///******************************** Павел  01.12.2010
//	ВозвращаемоеЗначение:
//		0 - нет обработки стандартных событий
//		1 - стандартные события обрабатываются только для активного элемента формы
//		2 - стандартные события обрабатываются для всей формы
Функция СтандартныеСобытия(_фИспользовать = "", _фВоВсейФорме = "") Экспорт
	Если фИспользоватьСтандартныеСобытия = 0 Тогда
		чВозврат = 0;
	ИначеЕсли фИспользовтаьСобытияВоВсейФорме = 0 Тогда
		чВозврат = 1;
	Иначе
		чВозврат = 2;
	КонецЕсли;
	
	//чтоб были значения только 0|1
	Если ТипЗначения(_фИспользовать) = 1 Тогда
		фИспользоватьСтандартныеСобытия = ?(_фИспользовать=0, 0, 1);
	КонецЕсли;
	Если ТипЗначения(_фВоВсейФорме) = 1 Тогда
		фИспользовтаьСобытияВоВсейФорме = ?(_фВоВсейФорме=0, 0, 1);
	КонецЕсли;
	
	Возврат чВозврат;
КонецФункции	// СтандартныеСобытия 
///******************************** Павел  01.12.2010

///******************************** Павел  01.12.2010
//	ГорВыравнивание:
//		0, "А[вто]",	"A[uto]"	- автоматически
//		1, "Л[ево]",	"L[eft]"	- прижать влево
//		2, "П[право]",	"R[ight]"	- прижать вправо
//		3, "Ц[ентр]",	"C[enter]"	- центрировать
Функция ДобавитьКолонку(ИмяКолонки, Заголовок = -1, Знач ГорВыравнивание = 0) Экспорт //:КолонкаТабличногоПоля
	Сам = Сам(Контекст);
	
	Если Заголовок = -1 Тогда
		ЗаголовокКолонки = ИмяКолонки;
	Иначе
		ЗаголовокКолонки = Заголовок;
	КонецЕсли;
	
	Если ТипЗначения(ГорВыравнивание) = 2 Тогда
		Если (Врег(Лев(ГорВыравнивание, 1)) = "А") Или (Врег(Лев(ГорВыравнивание, 1)) = "A") Тогда
			ГорВыравнивание = 0;
		ИначеЕсли (Врег(Лев(ГорВыравнивание, 1)) = "Л") Или (Врег(Лев(ГорВыравнивание, 1)) = "L") Тогда
			ГорВыравнивание = 1;
		ИначеЕсли (Врег(Лев(ГорВыравнивание, 1)) = "П") Или (Врег(Лев(ГорВыравнивание, 1)) = "R") Тогда
			ГорВыравнивание = 2;
		ИначеЕсли (Врег(Лев(ГорВыравнивание, 1)) = "Ц") Или (Врег(Лев(ГорВыравнивание, 1)) = "C") Тогда
			ГорВыравнивание = 3;
		КонецЕсли;
	КонецЕсли;
	
	
	Колонка = Сам.Колонки.Добавить(ИмяКолонки);
	Колонка.Данные						= ИмяКолонки;
	Колонка.Заголовок					= ЗаголовокКолонки;
	//Колонка.ИзменятьВидимость			= 0;
	Колонка.ГоризонтальноеВыравнивание	= ГорВыравнивание;
	Колонка.ИзменятьВидимость = ИзменятьВидимостьКолонок;
	
	Возврат Колонка;
КонецФункции	// ДобавитьКолонку
///******************************** Павел  01.12.2010

///******************************** ADirks 28.02.2011 ************
Процедура ДобавитьФлажок(ИмяКолонки) Экспорт
	сзКолонки = СтрокуВСписок(ИмяКолонки, ",", 1);
	
	Если сзФлажки = "" Тогда
		сзФлажки = сзКолонки;
	Иначе
		Для й = 1 По сзКолонки.РазмерСписка() Цикл
			сзФлажки.ДобавитьЗначение(сзКолонки.ПолучитьЗначение(й));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 28.02.2011 ************

///******************************** ADirks 30.05.2012 ************
Процедура ДобавитьДату(ИмяКолонки) Экспорт
	сзКолонки = СтрокуВСписок(ИмяКолонки, ",", 1);
	
	Если сзДаты = "" Тогда
		сзДаты = сзКолонки;
	Иначе
		Для й = 1 По сзКолонки.РазмерСписка() Цикл
			сзДаты.ДобавитьЗначение(сзКолонки.ПолучитьЗначение(й));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 30.05.2012 ************

///******************************** Павел  05.11.2013
Процедура ДобавитьСумму(ИмяКолонки, _Формат = "") Экспорт
	Сам = Сам(Контекст);
	
	Если _Формат = "" Тогда
		//ФорматКол = "Ч19.2.'";
		ФорматКол = ФорматСумм;
	Иначе
		ФорматКол = _Формат;
	КонецЕсли;
	
	сзКолонки = СтрокуВСписок(ИмяКолонки, ",", 1);
	
	Если сзСуммы = "" Тогда
		сзСуммы = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	Для й = 1 По сзКолонки.РазмерСписка() Цикл
		ИмяКол = сзКолонки.ПолучитьЗначение(й);
		Попытка
			Колонка = Сам.Колонки.Получить(ИмяКол);
			Колонка.Формат = ФорматКол;
		Исключение
		КонецПопытки;
		сзСуммы.ДобавитьЗначение(ИмяКол);
	КонецЦикла;
КонецПроцедуры	// ДобавитьСумму
///******************************** Павел  05.11.2013

///******************************** ADirks 11.11.2013 ************
Процедура КомандаПодбора(оКоманда, ДопПараметр) Экспорт
	Подбор_Команда = оКоманда;
	Подбор_ДопПараметр = ДопПараметр;
КонецПроцедуры
///******************************** ADirks 11.11.2013 ************

///******************************** ADirks 07.08.2013 ************
Функция ИмяКолонкиОбъект(НовИмя = -1) Экспорт
	Имя = Строка(ИмяКолонки_Объект);
	Если НовИмя <> -1 Тогда
		ИмяКолонки_Объект = НовИмя;
	КонецЕсли;
	Возврат Имя;
КонецФункции
///******************************** ADirks 07.08.2013 ************

///******************************** ADirks 07.08.2013 ************
Функция Объект(ДанныеСтроки) Экспорт
	Если ПустаяСтрока(ИмяКолонки_Объект) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Сам = Сам(Контекст);

	Если ПустоеЗначение(ДанныеСтроки) = 1 Тогда
		Возврат 0;
	КонецЕсли;

	Возврат ДанныеСтроки.Получить(ИмяКолонки_Объект);
КонецФункции

Функция ТекущийОбъект() Экспорт
	Если ПустаяСтрока(ИмяКолонки_Объект) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Сам = Сам(Контекст);

	Если ПустоеЗначение(Сам.ТекущиеДанные) = 1 Тогда
		Возврат 0;
	КонецЕсли;

	Возврат Сам.ТекущиеДанные.Получить(ИмяКолонки_Объект);
КонецФункции
///******************************** ADirks 07.08.2013 ************

///******************************** ADirks 07.08.2013 ************
Функция ОткрытьОбъект() Экспорт
	Сам = Сам(Контекст);
	Конт = 0;
	Объект = Сам.ТекущийОбъект();
	Если Объект <> 0 Тогда
		сзПарам = СоздатьОбъект("СписокЗначений");
		сзПарам.Установить("Контекст", КонтекстФормы);
		ОткрытьФорму(Объект, сзПарам);
		Конт = сзПарам;
	КонецЕсли;
	Возврат Конт;
КонецФункции
///******************************** ADirks 07.08.2013 ************

///******************************** ADirks 07.08.2013 ************
//Возвращает значение, пригодное для Сам.ТекущаяСтрока = СтрТП;
Функция НайтиОбъект(Объект) Экспорт
	Возврат Неопределено;
КонецФункции
///******************************** ADirks 07.08.2013 ************

///******************************** ADirks 07.08.2013 ************
Функция АктивизироватьОбъект(Объект) Экспорт
	Сам = Сам(Контекст);
	СтрТП = Сам.НайтиОбъект(Объект);
	Сам.ТекущаяСтрока = СтрТП;
	Возврат СтрТП;
КонецФункции
///******************************** ADirks 07.08.2013 ************

///******************************** ADirks 30.11.2012 ************
Процедура ПоказатьПодвал(тзПодвал) Экспорт
	Сам = Сам(Контекст);
	
	ПоставщикДанных = СоздатьОбъект("VTProvider");
	ПоставщикДанных.УстТаблицуЗначений(тзПодвал);
	Сам.Подвал.ПоставщикДанных = ПоставщикДанных;
	Сам.Подвал.ОбновитьСтроки();
КонецПроцедуры
///******************************** ADirks 30.11.2012 ************


Функция Сериализовать(сзНастройки) Экспорт
	Сам = Сам(Контекст);
	тзНастройки = СоздатьОбъект("ТаблицаЗначений");
	тзНастройки.НоваяКолонка("ИмяКолонки");
	тзНастройки.НоваяКолонка("Видимость");
	тзНастройки.НоваяКолонка("Ширина");
	//тзНастройки.НоваяКолонка("Сортировка");
	
	
	Если Сам.фПоказано() = 1 Тогда
		Для нКол = 1 По Сам.Колонки.Количество() Цикл
			Колонка = Сам.Колонки.Получить(нКол-1);
			тзНастройки.НоваяСтрока();
			тзНастройки.ИмяКолонки = Колонка.Имя;
			тзНастройки.Видимость = Колонка.Видимость;
			тзНастройки.Ширина = Колонка.Ширина;
			//тзНастройки.Сортировка = ;
		КонецЦикла;
		
		сзНастройки.Установить("НастройкиКолонок", ЗначениеВСтрокуВнутр(тзНастройки));
	КонецЕсли;
	
	Возврат тзНастройки;
КонецФункции

Функция Десериализовать(сзНастройки) Экспорт
	Сам = Сам(Контекст);
	
	Если ТипЗначенияСтр(сзНастройки) = "ТаблицаЗначений" Тогда
		тзНастройки = сзНастройки;
	ИначеЕсли ТипЗначенияСтр(сзНастройки) = "СписокЗначений" Тогда
		тзНастройки = ЗначениеИзСтрокиВнутр(сзНастройки.Получить("НастройкиКолонок"));
	Иначе
		Возврат 0;
	КонецЕсли;

	Если ТипЗначенияСтр(тзНастройки) <> "ТаблицаЗначений" Тогда
		Возврат 0;
	КонецЕсли;
	
	//фНеСохранятьПорядокКолонок = 0;
	//фНеИзменятьВидимостьКолонок = 0;
	
	Поставщик = Сам.ПоставщикДанных;
	Сам.ПоставщикДанных = ""; //отключим поставщика на время изменений
	
	//надо добавить, чего нет - для сохранения порядка вновь добавленых колонок
	Колонки = Сам.Колонки; //:КолонкиТабличногоПоля
	нКолонок = Колонки.Количество();
	Для нКол = 1 По нКолонок Цикл
		Кол = Колонки.Получить(нКол-1);
		нСтр = 0;
		Если тзНастройки.НайтиЗначение(Кол.Имя, нСтр, "ИмяКолонки") = 0 Тогда
			Попытка
				тзНастройки.НоваяСтрока(нКол);
			Исключение
				тзНастройки.НоваяСтрока();
			КонецПопытки;
			тзНастройки.ИмяКолонки = Кол.Имя;
			тзНастройки.Видимость = Кол.Видимость;
			тзНастройки.Ширина = Кол.Ширина;
		КонецЕсли;
	КонецЦикла;

	//и удалить колонки настроек, которых нет в ТП - во избежание
	н = тзНастройки.КоличествоСтрок();
	Пока н > 0 Цикл
		Имя = тзНастройки.ПолучитьЗначение(н, "ИмяКолонки");
		Попытка
			Кол = Сам.Колонки.Получить(Имя);
		Исключение
			тзНастройки.УдалитьСтроку(н);
		КонецПопытки;
		н = н - 1;
	КонецЦикла;
	
	тзНастройки.ВыбратьСтроки();
	Пока тзНастройки.ПолучитьСтроку() = 1 Цикл
		Имя = тзНастройки.ИмяКолонки;
		Кол = Колонки.Получить(Имя);
		Если (Сам.ИзменятьПозициюКолонок = 1) И (фНеСохранятьПорядокКолонок <> 1) Тогда
			Индекс = Колонки.Индекс(Кол);
			Сдвиг = тзНастройки.НомерСтроки - (Индекс+1);
			Если (Сдвиг <> 0)  Тогда
				Попытка
					Колонки.Сдвинуть(Индекс, Сдвиг);
				Исключение
					Сообщить(Имя+": "+Индекс+", смещ. "+Сдвиг);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

		Если Кол.ИзменениеРазмера = 1 Тогда
			//если нельзя менять размер - то и нефиг пытаться восстановить сохраненных размер
			Кол.Ширина		= тзНастройки.Ширина;
			Если Кол.Ширина = 0 Тогда //колонки с нулевой шириной фиг покажешь потом
				Кол.Ширина = 50;
			КонецЕсли;
		КонецЕсли;
		Если (Кол.ИзменятьВидимость = 1) И (фНеИзменятьВидимостьКолонок <> 1) Тогда
			//если менять видимость нельзя - то и нефиг ее менять
			Если Кол.Видимость <> тзНастройки.Видимость Тогда
				Кол.Видимость	= тзНастройки.Видимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	

	Сам.ПоставщикДанных = Поставщик;
	Сам.ОбновитьСтроки();

	Возврат 1;
КонецФункции

///******************************** ADirks 20.03.2019 ************
Процедура СохранитьНастройки() Экспорт
	Если фПоказано() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	сзНастройки = СоздатьОбъект("СписокЗначений");
	Сериализовать(сзНастройки);
	
	ИмяКаталога = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Настройки";
	Если ФС.СуществуетФайл(ИмяКаталога) <> 1 Тогда
		ФС.СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	ИмяФайла = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Настройки\"+ИмяПользователя()+"_"+ИмяНастройки+".СЗ";
	ЗначениеВФайл(ИмяФайла, сзНастройки, 1);
КонецПроцедуры

Процедура ВосстановитьНастройки() Экспорт
	ИмяФайла = ГМ.ПолучитьКонстанту("КаталогМодуля")+"Настройки\"+ИмяПользователя()+"_"+ИмяНастройки+".СЗ";
	сзНастройки = ЗначениеИзФайла(ИмяФайла);
	Если ТипЗначенияСтр(сзНастройки) = "СписокЗначений" Тогда
		Десериализовать(сзНастройки);
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 20.03.2019 ************

///******************************** Павел  02.12.2010
//	Процедуры-заглушки для стандартной обрабокти событий.
//		предназначены для переопределения в классах-наследниках
Функция ДобавитьСтроку() Экспорт
	Возврат 0;
КонецФункции	// ДобавитьСтроку
Функция УдалитьСтроку() Экспорт
	Возврат 0;
КонецФункции	// УдалитьСтроку
///******************************** Павел  02.12.2010

///******************************** ADirks 11.07.2012 ************
Функция сзВыделенныеСтроки() Экспорт
	Сам = Сам(Контекст);
	сз = СоздатьОбъект("СписокЗначений");
	
	Если Сам.РежимВыделения = 1 Тогда
		Для нСтр = 0 По Сам.ВыделенныеСтроки.Количество()-1 Цикл
			СтрокаТП = Сам.ВыделенныеСтроки.Получить(нСтр);
			сз.ДобавитьЗначение(СтрокаТП);
		КонецЦикла;
	ИначеЕсли ПустоеЗначение(Сам.ТекущаяСтрока) = 0 Тогда
		сз.ДобавитьЗначение(Сам.ТекущаяСтрока);
	КонецЕсли;
	
	Возврат сз;
КонецФункции
///******************************** ADirks 11.07.2012 ************

///******************************** ADirks 08.03.2012 ************
Функция ЗначениеТекущейЯчейки() Экспорт
	Сам = Сам(Контекст);
	Если ПустоеЗначение(Сам.ТекущиеДанные) = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сам.ТекущиеДанные.Получить(Сам.ТекущаяКолонка.Имя);
КонецФункции
///******************************** ADirks 08.03.2012 ************

///******************************** ADirks 30.03.2012 ************
Процедура КопироватьВБуфер() Экспорт
	Сам = Сам(Контекст);

	ИмяМетода = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ТекстВЯчейке");
	Если ПустаяСтрока(ИмяМетода) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(Сам.ТекущиеДанные);
		сзАрг.ДобавитьЗначение(Сам.ТекущаяКолонка.Имя);
		рез = "";
		оСервис.ВыполнитьФункцию(КонтекстФормы, ИмяМетода, сзАрг, рез);
		стрТекДанные = рез;
	Иначе
		стрТекДанные = СокрП(""+Сам.ЗначениеТекущейЯчейки());
	КонецЕсли;
	//стрТекДанные = СокрП(""+Сам.ЗначениеТекущейЯчейки());
	оБуфер = СоздатьОбъект("БуферОбмена");
	оБуфер.Установить(стрТекДанные);
КонецПроцедуры
///******************************** ADirks 30.03.2012 ************

///******************************** Павел  03.12.2010
Функция ПриЗакрытииФормы() Экспорт
	//Сообщить(" пз() ТП");
	Возврат 1;
КонецФункции	// ПриЗакрытииФормы
///******************************** Павел  03.12.2010

///******************************** Павел  03.12.2010
Функция ПослеОткрытияФормы() Экспорт
	Возврат 1;
КонецФункции	// 
///******************************** Павел  03.12.2010

///******************************** Павел  23.07.2012
Процедура ПриПовторномОткрытииФормы() Экспорт
КонецПроцедуры	// ПриПовторномОткрытииФормы
///******************************** Павел  23.07.2012

///******************************** Павел  14.12.2010
//	Если элемент формы сам умеет обрабатывать всякие DEL и прочие кнопки 
//	- нефиг их перехватывать
Функция НеПерехватываемБазовыеСобытияКлавиатуры() Экспорт
	//ТипАктивногоАтрибутаФормы = Сам(Контекст).ПолучитьБазовыйКласс("ТПерехватчик").ТипЭлементаФормы();
	//
	//Если ТипАктивногоАтрибутаФормы = 2 Тогда	//1CEDIT - поле ввода
	//	Возврат 1;
	//ИначеЕсли ТипАктивногоАтрибутаФормы = 5 Тогда	//1CEDIT - поле ввода в многострочной части
	//	Возврат 1;
	//ИначеЕсли ТипАктивногоАтрибутаФормы = 15 Тогда	//TABLE
	//	Возврат 1;
	//КонецЕсли;
	
	Возврат 0;
КонецФункции	// НеПерехватываемСобытияКлавиатуры
///******************************** Павел  14.12.2010

///******************************** Павел  01.12.2010
Функция _ПриОтжатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО) Экспорт
	Сам = Сам(Контекст);
	
	//Копипаста {
	Если фАктивныйЭлемент() = 1 Тогда
		фВБуфер = 0;
		Если ( Код = КодСимв("C") ) ИЛИ 
			 ( Код = VK_INSERT ) Тогда
			 	
			Если Ктрл = 1 Тогда
				Если (Альт+Шифт) = 0 Тогда
					фВБуфер = 1;
				КонецЕсли;
			КонецЕсли;
			
		//ИначеЕсли ( Код = VK_INSERT ) Тогда
		//	Если Ктрл = 1 Тогда
		//		Если (Альт+Шифт) = 0 Тогда
		//			фВБуфер = 1;
		//		КонецЕсли;
		//	КонецЕсли;
			
		ИначеЕсли (Код = VK_F2) И ((Альт+Шифт+Ктрл) = 0) Тогда
			Значение = Сам.ЗначениеТекущейЯчейки();
			ОткрытьФорму(Значение);
			
		ИначеЕсли Код = КодСимв("R") Тогда
			Если Ктрл = 1 Тогда
				//Сам(Контекст).ОбновитьСтроки();
				ФСО = 0;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
		Если фВБуфер = 1 Тогда
			Попытка
				КопироватьВБуфер();
				Возврат 1;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	//}

//	Если фИспользоватьСтандартныеСобытия = 0 Тогда
//		Возврат 0;
//	ИначеЕсли фИспользовтаьСобытияВоВсейФорме = 0 Тогда
//		Если фАктивныйЭлемент() <> 1 Тогда
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Сам = Сам(Контекст);
//	
//	
//	Если Альт + Шифт + Ктрл = 0 Тогда
//		Если НеПерехватываемБазовыеСобытияКлавиатуры() = 1 Тогда
//			Возврат 0;
//		КонецЕсли;
//		
//		Если (Код = 96) Или (Код = VK_INSERT) Тогда	//Num0 или Ins
//			ИмяМетода_Добавить = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ДобавитьСтроку");
//			Если ПустаяСтрока(ИмяМетода_Добавить) = 0 Тогда
//				ФСО = 0;
//				оСервис = СоздатьОбъект("Сервис");
//				оСервис.ВыполнитьПроцедуру(КонтекстФормы, ИмяМетода_Добавить);
//				Возврат 1;
//			Иначе
//				Возврат Сам.ДобавитьСтроку();
//			КонецЕсли;
//			
//		ИначеЕсли Код = VK_DELETE Тогда	//Del
//			ИмяМетода_Удалить = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "УдалитьСтроку");
//			Если ПустаяСтрока(ИмяМетода_Удалить) = 0 Тогда
//				ФСО = 0;
//				оСервис = СоздатьОбъект("Сервис");
//				оСервис.ВыполнитьПроцедуру(КонтекстФормы, ИмяМетода_Удалить);
//				Возврат 1;
//			Иначе
//				Возврат Сам.УдалитьСтроку();
//			КонецЕсли;
//
//		ИначеЕсли Код = VK_F9 Тогда
//			ИмяМетода_Копировать = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "КопироватьСтроку");
//			Если ПустаяСтрока(ИмяМетода_Копировать) = 0 Тогда
//				ФСО = 0;
//				оСервис = СоздатьОбъект("Сервис");
//				оСервис.ВыполнитьПроцедуру(КонтекстФормы, ИмяМетода_Копировать);
//				Возврат 1;
//			Иначе
//				//Возврат Сам.КопироватьСтроку();
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
	
	Возврат 0;
КонецФункции	// ПриОтжатииКнопкиКлавиатуры
///******************************** Павел  01.12.2010

///******************************** Павел  23.12.2010
Функция _ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО) Экспорт
	Если фАктивныйЭлемент() = 1 Тогда
		Если Код = КодСимв("R") Тогда
			Если Ктрл = 1 Тогда
				Сам(Контекст).ОбновитьСтроки();
				ФСО = 0;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат 0;
КонецФункции	// _ПриНажатииКнопкиКлавиатуры
///******************************** Павел  23.12.2010


///******************************** ADirks 16.12.2009
Процедура ПоказатьФлажок(ОформлениеСтроки, ДанныеСтроки, ИмяКолонки) Экспорт
	Сам = Сам(Контекст);
	
	Попытка
		Колонка = Сам.Колонки.Получить(ИмяКолонки);
	Исключение
		Возврат;
	КонецПопытки;
	Если ПустоеЗначение(Колонка) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Колонка.Видимость = 1 Тогда
		Ячейка = ОформлениеСтроки.Ячейки.Получить(ИмяКолонки);
		Ячейка.ОтображатьТекст = 0;
		Ячейка.ОтображатьФлажок = 1;
		Попытка
			Ячейка.ЗначениеФлажка   = ДанныеСтроки.Получить(ИмяКолонки);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 16.12.2009

Процедура ПоказатьДату(ОформлениеСтроки, ДанныеСтроки, ИмяКолонки) Экспорт
	Сам = Сам(Контекст);
	
	Попытка
		Колонка = Сам.Колонки.Получить(ИмяКолонки);
	Исключение
		Возврат;
	КонецПопытки;
	Если ПустоеЗначение(Колонка) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Колонка.Видимость = 1 Тогда
		Ячейка = ОформлениеСтроки.Ячейки.Получить(ИмяКолонки);
		Попытка
			_Дата = ДанныеСтроки.Получить(ИмяКолонки);
		Исключение
			Возврат;
		КонецПопытки;
		Если ( ПустоеЗначение(_Дата) = 1 ) ИЛИ 
			 ( _Дата = '01.01.1753' ) Тогда
			Ячейка.Текст = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///******************************** Павел  05.11.2013
Процедура ПоказатьСумму(ОформлениеСтроки, ДанныеСтроки, ИмяКолонки) Экспорт
	Сам = Сам(Контекст);
	
	Попытка
		Колонка = Сам.Колонки.Получить(ИмяКолонки);
	Исключение
		Возврат;
	КонецПопытки;
	Если ПустоеЗначение(Колонка) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Колонка.Видимость = 1 Тогда
		Ячейка = ОформлениеСтроки.Ячейки.Получить(ИмяКолонки);
		Попытка
			_Сумма = Число(ДанныеСтроки.Получить(ИмяКолонки));
		Исключение
			Возврат;
		КонецПопытки;
		
		Если _Сумма < 0 Тогда
			Ячейка.ЦветТекста = цветКрасный;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	// ПоказатьСумму
///******************************** Павел  05.11.2013

///******************************** ADirks 28.02.2011 ************
Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки, ТипРегиона) Экспорт
	Если сзФлажки <> "" Тогда
		Для н = 1 По сзФлажки.РазмерСписка() Цикл
			ИмяКолонки = сзФлажки.ПолучитьЗначение(н);
			ПоказатьФлажок(ОформлениеСтроки, ДанныеСтроки, ИмяКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если сзДаты <> "" Тогда
		Для н = 1 По сзДаты.РазмерСписка() Цикл
			Имя = сзДаты.ПолучитьЗначение(н);
			ПоказатьДату(ОформлениеСтроки, ДанныеСтроки, Имя)
		КонецЦикла;
	КонецЕсли;

	Если сзСуммы <> "" Тогда
		Для н = 1 По сзСуммы.РазмерСписка() Цикл
			Имя = сзСуммы.ПолучитьЗначение(н);
			ПоказатьСумму(ОформлениеСтроки, ДанныеСтроки, Имя)
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 28.02.2011 ************

///******************************** Павел  07.12.2010
Процедура ЗаполнитьМеню(сзМеню) Экспорт
	//сзМеню//:СписокЗначений
	
	Сам = Сам(Контекст);
	Значение = Сам.ЗначениеТекущейЯчейки();
	Если (ТипЗначения(Значение) = 11) ИЛИ (ТипЗначения(Значение) = 12) Тогда
		сзМеню.ДобавитьЗначение("ОткрытьТекущееЗначение", "Открыть "+Значение);
		сзМеню.ДобавитьЗначение("------");
	КонецЕсли;
	сзМеню.ДобавитьЗначение("КопироватьВБуфер", "Копировать в буфер");
	сзМеню.ДобавитьЗначение("Настройка", "Настройка");
	сзМеню.ДобавитьЗначение("ОбновитьСтроки", "Обновить");
КонецПроцедуры
///******************************** Павел  07.12.2010

///******************************** Павел  07.12.2010
//	Возвращает:
//		1 - действие обработано (как правило, дальнейшей обработки не требуется)
//		0 - действие не обработано
Функция ПриВыбореМеню(Действие) Экспорт
	Сам = Сам(Контекст);

	Если Действие = "" Тогда
		Возврат 1;
	ИначеЕсли Действие = "ОткрытьТекущееЗначение" Тогда
		Значение = Сам.ЗначениеТекущейЯчейки();
		ОткрытьФорму(Значение);
		Возврат 1;

	ИначеЕсли Действие = "КопироватьВБуфер" Тогда
		КопироватьВБуфер();
		Возврат 1;
		
	ИначеЕсли Действие = "Настройка" Тогда
		сзПарам = СоздатьОбъект("СписокЗначений");
		сзПарам.Установить("ТП", Сам);
		ГМ.ОткрытьОбработку("обрНастройкаКолонокТП", сзПарам, 1);
		Возврат 1;

	ИначеЕсли Действие = "ОбновитьСтроки" Тогда
		ТекСтр = Сам.ТекущаяСтрока;
		Сам.ОбновитьСтроки();
		Если ПустаяСтрока(ТекСтр) = 0 Тогда
			Сам.ТекущаяСтрока = ТекСтр;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции	// ПриВыбореМеню
///******************************** Павел  07.12.2010

///******************************** Павел  07.12.2010
Процедура ПриКонтекстномМеню(ТипРегиона, Колонка, Стр) Экспорт
	Сам = Сам(Контекст);
	
	сзМеню = СоздатьОбъект("СписокЗначений");
	
	ИмяМетода_Заполнить = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ЗаполнитьМеню");
	ИмяМетода_ПриВыборе = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ПриВыбореМеню");
	
	Если ПустаяСтрока(ИмяМетода_Заполнить) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзПарам = СоздатьОбъект("СписокЗначений");
		сзПарам.ДобавитьЗначение(сзМеню);
		оСервис.ВыполнитьПроцедуру(КонтекстФормы, ИмяМетода_Заполнить, сзПарам);
	Иначе
		Сам.ЗаполнитьМеню(сзМеню);
	КонецЕсли;
	
	Действие = "";
	Если сзМеню.ВыбратьЗначение(Действие,,,, 1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	

	Если ПустаяСтрока(ИмяМетода_ПриВыборе) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзПарам = СоздатьОбъект("СписокЗначений");
		сзПарам.ДобавитьЗначение(Действие);
		рез = "";
		оСервис.ВыполнитьФункцию(КонтекстФормы, ИмяМетода_ПриВыборе, сзПарам, рез);
		Если рез <> 1 Тогда
			Сам.ПриВыбореМеню(Действие);
		КонецЕсли;
	Иначе
		Сам.ПриВыбореМеню(Действие);
	КонецЕсли;
КонецПроцедуры	// ПриКонтекстномМеню
///******************************** Павел  07.12.2010

///******************************** Павел  14.01.2011
Функция ВыборСтроки(Стр, Колонка, ТипРегиона, ТипОбластиЯчейки) Экспорт
	Сам = Сам(Контекст);
	Конт = Сам.ОткрытьОбъект();
	Если ТипЗначения(Конт) = 100 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции	// ВыборСтроки
///******************************** Павел  14.01.2011

///******************************** Павел  14.01.2011
Процедура Выбор(Стр, Колонка, ТипРегиона, ТипОбластиЯчейки) Экспорт
	Сам = Сам(Контекст);
	
	Если ПустоеЗначение(Сам.ТекущаяСтрока) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Подбор_Команда <> Неопределено Тогда
		Подбор_Команда.Выполнить(Сам.ТекущаяСтрока, Подбор_ДопПараметр);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "Выбор");
	Если ПустаяСтрока(ИмяОбработчика) = 0 Тогда
		рез = "";
		Если Сам.ВыполнитьКоллБэкФункцию(ИмяОбработчика, рез, Сам, Стр, Колонка, ТипРегиона, ТипОбластиЯчейки) = 1 Тогда
			Если рез = 1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ТТабличноеПоле
	Сам.ВыборСтроки(Стр, Колонка, ТипРегиона, ТипОбластиЯчейки);
КонецПроцедуры	// Выбор
///******************************** Павел  14.01.2011


//===================================================
//				Перехватчики событий
///******************************** Павел  03.12.2010
Функция _ПриЗакрытии() Экспорт
	Сам = Сам(Контекст);

	Сам.СохранитьНастройки();
	
	Если Сам.ПриЗакрытииФормы() <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
КонецФункции
///******************************** Павел  03.12.2010

///******************************** Павел  03.12.2010
Функция _ПослеОткрытия() Экспорт
	Сам = Сам(Контекст);
	Если Сам.ПослеОткрытияФормы() <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Сам.Показать();
	
	Возврат 1;
КонецФункции	// ПослеОткрытияФормы
///******************************** Павел  03.12.2010

///******************************** Павел  23.07.2012
Функция _ПриПовторномОткрытии() Экспорт
	Сам = Сам(Контекст);
	
	Сам.ПриПовторномОткрытииФормы();
	
	Возврат 1;
КонецФункции	// Событие_ПриПовторномОткрытии
///******************************** Павел  23.07.2012

///******************************** ADirks 13.07.2012 ************
Процедура ПриИзмененииВидимостиКолонки(Колонка, флВидимость, ФСО) Экспорт
	Если ИзменятьВидимостьКолонок <> 1 Тогда
		ФСО = 0;
		Возврат;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 13.07.2012 ************



///******************************** Павел  12.01.2011
//	Перепаковывает ОформлениеСтроки.Ячейки в структуру
//
//	Пример использования:
//		стЯчейки = оТП.ЯчейкиОформления(ОформлениеСтроки); //:ОформлениеСтроки
//		Если стЯчейки.Свойство("ПредставлениеДокумента", Яч) = 1 Тогда
//			Яч.УстановитьТекст(ВидДокумента(ДанныеСтроки.Документ));
//		КонецЕсли;
//			...
Функция ЯчейкиОформления(ОформлениеСтроки, СписокКолонок = "") Экспорт
	Сам = Сам(Контекст);
	
	стВозврат = СоздатьОбъект("Структура");
	
	Если СписокКолонок = "" Тогда
		Колонки = Сам.Колонки;
		Для й = 1 По Колонки.Количество() Цикл
			ИмяКолонки = Колонки.Получить(й - 1).Имя;
			Если Сам.Колонки.Получить(ИмяКолонки).Видимость = 1 Тогда
				стВозврат.Вставить(ИмяКолонки, ОформлениеСтроки.Ячейки.Получить(ИмяКолонки));
			КонецЕсли;
		КонецЦикла;
	Иначе
		сзКолонки = СтрокуВСписок(СписокКолонок);
		Для й = 1 По сзКолонки.РазмерСписка() Цикл
			ИмяКолонки = сзКолонки.ПолучитьЗначение(й);
			Попытка
				Кол = Сам.Колонки.Получить(ИмяКолонки);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ПустоеЗначение(Кол) = 0 Тогда
				Если Сам.Колонки.Получить(ИмяКолонки).Видимость = 1 Тогда
					стВозврат.Вставить(ИмяКолонки, ОформлениеСтроки.Ячейки.Получить(ИмяКолонки));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат стВозврат;
КонецФункции	// ЯчейкаОформления
///******************************** Павел  12.01.2011

///******************************** ADirks 02.08.2012 ************
//Убирает все значки со всех колонок, и ставит в указанную
Процедура ПоказатьСортировкуВЗаголовке(Колонка, Знач ЗнакУпорядочивания = 1) Экспорт
	Сам = Сам(Контекст);
	
	Для нКол = 0 По Сам.Колонки.Количество()-1 Цикл
		Кол = Сам.Колонки.Получить(нКол);
		Кол.ЗнакУпорядочивания = 0;
	КонецЦикла;

	Если ПустоеЗначение(Колонка) = 0 Тогда
		Кол = Сам.Колонки.Получить(Колонка);
		Кол.ЗнакУпорядочивания = ЗнакУпорядочивания;
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 02.08.2012 ************
