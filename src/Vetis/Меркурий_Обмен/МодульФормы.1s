Перем ГМ;
Перем ВыбФирма Экспорт;

Перем НомерТекущейФормы, СписокОтправки;

Процедура ПриИзмененииФирмы()
	ГМ.Инициализация(Контекст);
	ГМ.ЗагрузитьПараметрыВФорму(Контекст);
КонецПроцедуры


Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)

	Если ЭлементДиалога = "ВыбПлощадка" Тогда
		ВремЭлем = ВыбХС;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Отправитель_Площадка" Тогда
		ВремЭлем = Отправитель_ХозСубъект;
		ОткрытьФорму("Справочник.ВСД_Площадка",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Регион" Тогда
		ВремЭлем = Страна;
		ОткрытьФорму("Справочник.ВСД_Регион",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Район" Тогда
		ВремЭлем = Регион;
		ОткрытьФорму("Справочник.ВСД_Район",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Город" Тогда
		Если Район.Выбран() = 1 Тогда
			ВремЭлем = Район;    
		Иначе
			ВремЭлем = Регион;	
		КонецЕсли;		
		ОткрытьФорму("Справочник.ВСД_Город",ВремЭлем);
		ФлагПродолжения = 0;
	ИначеЕсли ЭлементДиалога = "Улица" Тогда
		ВремЭлем = Город;
		ОткрытьФорму("Справочник.ВСД_Улица",ВремЭлем);
		ФлагПродолжения = 0;
	КонецЕсли;

КонецПроцедуры

//======= ФУНКЦИИ ИНТЕРФЕЙСА ==============

 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)

 	Если ЗначениеЗакладки = "Параметры" Тогда
		Форма.ИспользоватьСлой(ЗначениеЗакладки);
 	Иначе
		Форма.ИспользоватьСлой("Основной,"+ЗначениеЗакладки);
 	КонецЕсли;

КонецПроцедуры


//=========================== Площадки =================================

Процедура СоздатьНовуюПлощадку(ВыбХС)
	Если ПустоеЗначение(ВыбХС)=1 Тогда
		Предупреждение("Выберите Хоз субъект");
	КонецЕсли;
	ВидСтравочникаХС = Метаданные.Справочник("ВСД_ХозСубъект").Реквизит("Контрагент").Вид;
	ВидСтравочникаПЛ = Метаданные.Справочник("ВСД_Площадка").Реквизит("Контрагент").Вид;

	Если ВидСтравочникаХС = ВидСтравочникаПЛ Тогда
		СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

		СпрПл.Новый();
		СпрПл.Наименование = ВыбХС.Контрагент.Наименование;
		СпрПл.Контрагент = ВыбХС.Контрагент;
		СпрПл.Адрес = ГМ.ПолучитьФактАдрес(ВыбХС.Контрагент);
		СпрПл.GuidХозСубъекта = ВыбХС.GUID;
		СпрПл.Записать();
		Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

		ВыбПлощадка = СпрПл.ТекущийЭлемент();
	Иначе
		Если Метаданные.Справочник(ВидСтравочникаПЛ).Владелец.Выбран() = 1 Тогда
			Спр = СоздатьОбъект("Справочник."+ВидСтравочникаПЛ);
			Спр.ИспользоватьВладельца(ВыбХС.Контрагент);
			Если Спр.Выбрать("Выберите грузополучателя",) = 1 Тогда
				СпрПл = СоздатьОбъект("Справочник.ВСД_Площадка");

				СпрПл.Новый();
				СпрПл.Наименование = Спр.Наименование;
				СпрПл.Контрагент = Спр.ТекущийЭлемент();
				СпрПл.Адрес = ГМ.ПолучитьФактАдрес(СпрПл.Контрагент);
				СпрПл.GuidХозСубъекта = ВыбХС.GUID;
				СпрПл.Записать();
				Сообщить("Создан ВСД_Площадка "+СпрПл.ТекущийЭлемент());

				ВыбПлощадка = СпрПл.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СинхронизацияСпрХС()

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|id = Справочник.ВСД_ХозСубъект.ТекущийЭлемент;
	|GuidХозСубъекта = Справочник.ВСД_ХозСубъект.Guid;
	|Группировка id;
	|Без Итогов;
	|";

	//Если обновитьВсеХозСубъекты=0 Тогда
  	//	ТекстЗапроса=ТекстЗапроса+"Условие (СокрЛП(GuidХозСубъекта) = '');";
  	//КонецЕсли;

	Запрос.Выполнить(ТекстЗапроса);
	тз =СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);

	Спр = СоздатьОбъект("Справочник.ВСД_ХозСубъект");

	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл

	  	Если обновитьВсеХозСубъекты=0 Тогда
	  		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
	  			Продолжить;
	  		КонецЕсли;
	  	КонецЕсли;

		ГМ.ХС_ПолучитьGuid(тз.id);

		Если ПустоеЗначение(тз.id.GUID)=0 Тогда
			Сообщить("Получение площадок хозСубъекта = "+тз.id);
			//ГМ.НайтиПлощадкиПоНазванию(тз.id, 0 );
			ГМ.ЗагрузитьПлощадки( тз.id );
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//======================= Тестирование \ Проверка ==========================

//======================================================================
Процедура ПриИзмененииВидаДокумента()
	Если спВидДокумента.ТекущаяСтрока() <> 0 Тогда
		ВидДок = спВидДокумента.ПолучитьЗначение(спВидДокумента.ТекущаяСтрока());

		Форма.ВыбДокумент.НазначитьТип(ВидДок);

		НомерТекущейФормы = 1;
		СписокОтправки.УдалитьВсе();

		Если (ВидДок = "Документ.ВСД") ИЛИ (ВидДок = "Документ.ВСД2") Тогда
			СписокОтправки.ДобавитьЗначение("Аннулировать");
		Иначе
			СписокОтправки.ДобавитьЗначение("Отправить");
			Если (ВидДок = "Документ.ВСД_исходящий") ИЛИ (ВидДок = "Документ.ВСД2_исходящий") Тогда
				СписокОтправки.ДобавитьЗначение("Отправить все");
			КонецЕсли;
		КонецЕсли;
		Форма.КнопкаОтправить.Заголовок(СписокОтправки.ПолучитьЗначение(1));
	КонецЕсли;
КонецПроцедуры // ПриИзмененииВидаДокумента

//======================================================================
Процедура ПоКнопкеОтправить()
	ВидДок = спВидДокумента.ПолучитьЗначение(спВидДокумента.ТекущаяСтрока());

	Если ВидДок = "Документ.ВСД_входящий" Тогда ГМ.Отправить_ВСД_Входящий(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_исходящий" Тогда
		Если НомерТекущейФормы = 1 Тогда ГМ.Отправить_ВСД_Входящий(ВыбДокумент);
		ИначеЕсли НомерТекущейФормы = 2 Тогда ГМ.ОтправитьВсе_ВСД_Исходящий("",НачДата, КонДата);
		КонецЕсли;
	ИначеЕсли ВидДок = "Документ.ВСД_транзакция" Тогда ГМ.Отправить_ВСД_транзакция(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_Производство" Тогда ГМ.Отправить_ВСД_производство(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_Инвентаризация" Тогда ГМ.Отправить_ВСД_Инвентаризация(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД_ОбъединениеПартий" Тогда ГМ.Отправить_ВСД_ОбъединениеПартий(ВыбДокумент);
	ИначеЕсли ВидДок = "Документ.ВСД" Тогда ГМ.Отправить_ВСД_Аннулирование(ВыбДокумент);
	Иначе
		Предупреждение("Не реализовано!");
	КонецЕсли;
КонецПроцедуры // ПоКнопкеОтправить

//======================================================================
Процедура ВыборФормыОтправки()
	ВыбЗнач = ""; Поз = 0;
	Если СписокОтправки.ВыбратьЗначение(ВыбЗнач,,Поз,,1) = 1 Тогда
		Форма.КнопкаОтправить.Заголовок(ВыбЗнач);
		НомерТекущейФормы = Поз;
	КонецЕсли;
	ПоКнопкеОтправить();
КонецПроцедуры // ВыборФормыОтправки

//======================================================================
Процедура ПоКнопкеОтвет()
	ГМ.ПолучитьРезультат_ВСД( ВыбДокумент.applicationID, ВыбДокумент );
КонецПроцедуры // ПоКнопкеОтвет

// ========================================================================
Процедура ПоКнопкеПараметры()
   КаталогОбработки = ГМ.ПолучитьКонстанту("КаталогМодуля");
   ОткрытьФорму("Отчет", , КаталогОбработки+"Меркурий_Параметры.ert");
КонецПроцедуры // ПоКнопкеПараметры

//======================================================================
Процедура ПриИзмененииСФ()
	Если СписокФирм.ТекущаяСтрока() <> 0 Тогда
		ВыбФирма = СписокФирм.ПолучитьЗначение(СписокФирм.ТекущаяСтрока());
		ГМ.Инициализация(Контекст);
	    ГМ.ЗагрузитьПараметрыВФорму(Контекст);
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСФ

// ========================================================================
Процедура ПриОткрытии()

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("ХозСубъекты", "Хоз. субъекты");
	Форма.Закладки.ДобавитьЗначение("Партии", "Партии и ВСД");
	Форма.Закладки.ДобавитьЗначение("Документы", "Справочники и документы");
	//Форма.Закладки.ДобавитьЗначение("Параметры");

	Форма.Закладки.ТекущаяСтрока(1);
	ПриВыбореЗакладки(1, Форма.Закладки.ПолучитьЗначение(1));

	ИмяФайла="";
	КаталогОбработки="";

	РасположениеФайла(КаталогОбработки, ИмяФайла);

    ГМ = СоздатьОбъект("Меркурий_ГлобальныйМодуль");
	ГМ.Инициализация(Контекст);
	Если ПустоеЗначение(Отправитель_ХозСубъект) = 0 Тогда
		ВыбФирма = ГМ.ПолучитьФирмуПоХС(Отправитель_ХозСубъект);
		ГМ.Инициализация(Контекст);
	КонецЕсли;
    ГМ.ЗагрузитьПараметрыВФорму(Контекст);


	НомерТекущейФормы	= 1;

	СписокОтправки = СоздатьОбъект("СписокЗначений");

	Для Индекс = 1 По Метаданные.Документ() Цикл
		Док = Метаданные.Документ(Индекс);
		Значение = Док.Идентификатор;
		Если Лев(Значение, 3) = "ВСД" Тогда
			Представление = Док.Представление();
			Комментарий = Док.Комментарий;
			Если ПустаяСтрока(Комментарий) = 0 Тогда
				Представление = Представление + " (" + Комментарий +")";
			КонецЕсли;
			спВидДокумента.ДобавитьЗначение("Документ."+Значение, Представление);
		КонецЕсли;
	КонецЦикла;
	спВидДокумента.ТекущаяСтрока(1);
	ПриИзмененииВидаДокумента();

	ГМ.СписокФирм.Выгрузить(СписокФирм);
	Если СписокФирм.РазмерСписка() = 0 Тогда
		Предупреждение("Нет сохраненных настроек, обмен невозможен!");
		Возврат; СтатусВозврата(0);
	Иначе
		Поз = СписокФирм.НайтиЗначение(ВыбФирма);
		Если Поз <> 0 Тогда
			СписокФирм.ТекущаяСтрока(Поз);
		КонецЕсли;
		ПриИзмененииФирмы();
	КонецЕсли;

КонецПроцедуры

// ========================================================================

Процедура ЗагрузитьУлицы()
	Если ПустоеЗначение(Город)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Город, 0 );
	ИначеЕсли ПустоеЗначение(Район)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Район, 0 );
	ИначеЕсли ПустоеЗначение(Регион)=0 Тогда
		ГМ.ИнициализацияХС_ЗагрузитьУлицы(  Регион, 0 );
	Иначе
		Сообщить("Выберите город");
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьГорода_НасПункты()
	Если Район.Выбран() = 0 Тогда
	    ГМ.ИнициализацияХС_ЗагрузитьГорода(Регион);
	Иначе
		ГМ.ИнициализацияХС_ЗагрузитьНаселенныеПунктыПоРайону(Район);
	КонецЕсли;
КонецПроцедуры

// ========================================================================

Процедура УдалитьПартии()
	
	СпрПартия = СоздатьОбъект("Справочник.ВСД_Партия");
	НачатьТранзакцию(); // Ускоримся
	Попытка		
		СпрПартия.ВыбратьЭлементы();
		Пока СпрПартия.ПолучитьЭлемент() = 1 Цикл
			Если СпрПартия.Получатель_Площадка = Отправитель_Площадка Тогда			
				СпрПартия.Удалить(0);
				Сообщить("["+СпрПартия.Код+"] помечена на удаление ");
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();	
КонецПроцедуры

Процедура ПолучитьСписокВСД()
	ТипДок = VetDocumentType.ПолучитьЗначение( VetDocumentType.ТекущаяСтрока() ); 
	СтатусДок = VetDocumentStatus.ПолучитьЗначение( VetDocumentStatus.ТекущаяСтрока() );  
	ГМ.ПолучитьСписокВСД(Отправитель_Площадка, ТипДок, СтатусДок, Смещение );
КонецПроцедуры


//{========================= Список изменений =================

Процедура ПриНажатииЛевойКнопки(Сост, х, у)
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
	Если ТипЗначенияСтр(Атр) = "АтрибутФормы" Тогда
		Если Атр.Идентификатор = "Версия" Тогда
			ЗапуститьПриложение(ГМ.ВерсияСсылка());
		КонецЕсли;  
	КонецЕсли;	
	
КонецПроцедуры

//}===========================================================

Попытка
	ЗагрузитьВнешнююКомпоненту("1cpp.dll");
Исключение
	Сообщить("Ошибка при загрузке 1cpp.dll");
	Сообщить(ОписаниеОшибки());
КонецПопытки;


НачДата = ТекущаяДата();
КонДата = НачДата;

productType = 1; //мясо
ВыбФирма = "";


 //{ VetDocumentType
    //    TRANSPORT, = 1	= Транспортный ВСД.
    //    PRODUCTIVE, = 2 	= Производственный ВСД.
    //    RETURNABLE, = 3 	= Возвратный ВСД.
    //    INCOMING, = 4  	= Входящий ВСД.
    //    OUTGOING, = 5  	= Исходящий ВСД.
    //}

	VetDocumentType.ДобавитьЗначение("TRANSPORT", "Транспортный ВСД");
	VetDocumentType.ДобавитьЗначение("PRODUCTIVE", "Производственный ВСД");
	VetDocumentType.ДобавитьЗначение("RETURNABLE", "Возвратный ВСД");
	VetDocumentType.ДобавитьЗначение("INCOMING", "Входящий ВСД");
	VetDocumentType.ДобавитьЗначение("OUTGOING", "Исходящий ВСД");

    //{ VetDocumentStatus
    //
    //    /// <remarks/>
    //    CREATED, = 1
    //
    //    /// <remarks/>
    //    CONFIRMED, = 2
    //
    //    /// <remarks/>
    //    WITHDRAWN, = 3
    //
    //    /// <remarks/>
    //    UTILIZED, = 4
    //}

VetDocumentStatus.ДобавитьЗначение("CREATED", "Созданные / CREATED");
VetDocumentStatus.ДобавитьЗначение("CONFIRMED", "Подтвержденные / CONFIRMED");
VetDocumentStatus.ДобавитьЗначение("WITHDRAWN", "Аннулированные / WITHDRAWN");
VetDocumentStatus.ДобавитьЗначение("UTILIZED", "Погашенные / UTILIZED");