
Перем Неопределено;


Перем ИмяКнопки;
Перем тзДанные;
Перем сзРедактируемыеФлажки;
Перем тзРедактируемыеКолонки;

Перем фРазрешеноМенятьСортировку Экспорт;
Перем тзСортировка;

Перем фРедактированиеРазрешено Экспорт;
Перем фДанныеИзменены;
//===========================================================


//===========================================================
//=== Описание callback-методов =============================
//===========================================================
// События, передаваемые в форму:
// - Пометка(нСтр, ИмяКолонки, Флажок)
//
// - ПриНачалеРедактированияЗначения(СтрокаТП, КолонкаТП, Регион, Значение) функ
//   1 - можно редактировать, 0 - нельзя
// - ПроверитьРедактируемоеЗначение(СтрокаТП, КолонкаТП, Регион, Значение) функ
//   1 - хорошее значение, 0 - плохое значение.
//   Возникает при окончании редактирования в ячейке
//
// - ПослеИзменения(СтрокаТП, КолонкаТП, Регион, Значение) проц
//   Возникает после записи нового значения в ТЗ
//
// Имя обработчика события формируется как <ИмяКнопки>_<ИмяСобытия> или <ИмяКнопки><ИмяСобытия>
//===========================================================
//===========================================================

//_____________________________________________________________________________
Функция Сам(Конт) Возврат Конт; КонецФункции //:Контекст

//_____________________________________________________________________________
//Находит строку ТЗ по указанным колонкам и их значениям
//Возвращает 1 если строка найдена, и 0 в противном случае
Функция НайтиСтрокуТЗ(ТЗ, КолонкаПоиска, ЗначПоиска, КолонкаПоиска2="", ЗначПоиска2="") Экспорт
    Перем н;
	Если ТЗ.НайтиЗначение(ЗначПоиска, н, КолонкаПоиска)=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТЗ.ПолучитьСтрокуПоНомеру(н);
	Если КолонкаПоиска2="" Тогда Возврат 1; КонецЕсли;
	
	Пока н<=ТЗ.КоличествоСтрок() Цикл
		Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска) = ЗначПоиска Тогда
			Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска2) = ЗначПоиска2 Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(н);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		н = н + 1;
	КонецЦикла;
	Возврат 0;
КонецФункции

///******************************** ADirks 08.09.2006
Функция ЕстьКолонкаТЗ(ТЗ, ИмяКолонки) Экспорт
	Попытка
		ТЗ.ПолучитьПараметрыКолонки(ИмяКолонки);
		Возврат 1;
	Исключение
		Возврат 0;
	КонецПопытки;
	Возврат 1;
КонецФункции
///******************************** ADirks 08.09.2006


///******************************** ADirks 07.08.2006
Функция СтрокуВСписок(_Стр_, Разделитель = ",", ОбрезатьПробелы = 0) Экспорт
	Перем Стр, Поз;
	Перем Сп, Зн;
	
	Сп = СоздатьОбъект("СписокЗначений");
	Стр = СтрЗаменить(_Стр_, Разделитель, РазделительСтрок);
	КоличествоСтрок = СтрКоличествоСтрок(Стр);
	Для н = 1 По КоличествоСтрок Цикл
		Зн = СтрПолучитьСтроку(Стр, н);
		Если ОбрезатьПробелы = 1 Тогда Зн = СокрЛП(Зн); КонецЕсли;
		Сп.ДобавитьЗначение(Зн, Зн);
	КонецЦикла;

	Возврат Сп;
КонецФункции
///******************************** ADirks 07.08.2006




///******************************** Павел  01.12.2010
Процедура Конструктор()
	тзДанные = СоздатьОбъект("ТаблицаЗначений");
	фРедактированиеРазрешено = 1;
КонецПроцедуры	// Конструктор
///******************************** Павел  01.12.2010

///******************************** ADirks 23.08.2012 ************
Функция фДанныеИзменены(НовЗнач = -1) Экспорт
	_фДанныеИзменены = фДанныеИзменены;
	Если НовЗнач = 1 Тогда
		фДанныеИзменены = 1;
	ИначеЕсли НовЗнач = 0 Тогда
		фДанныеИзменены = 0;
	КонецЕсли;
	Возврат _фДанныеИзменены;
КонецФункции
///******************************** ADirks 23.08.2012 ************

///******************************** ADirks 27.11.2012 ************
Процедура ПриЗаписи_фРедактированиеРазрешено(НовЗнач)
	фРедактированиеРазрешено = ?(НовЗнач=1, 1, 0);
КонецПроцедуры
///******************************** ADirks 27.11.2012 ************

///******************************** Павел  01.12.2010
Процедура Инит(_Контекст, _ИмяКнопки, _фРедактированиеРазрешено = 0) Экспорт
	Сам = Сам(Контекст);
	
	ИмяКнопки = _ИмяКнопки;
	фРедактированиеРазрешено = _фРедактированиеРазрешено;
	
	фРазрешеноМенятьСортировку = 0;
	тзСортировка = СоздатьОбъект("ТаблицаЗначений");
	тзСортировка.НоваяКолонка("Имя", "Строка");
	тзСортировка.НоваяКолонка("Направление", "Число");
	
	Сам.ПолучитьБазовыйКласс().Инит(_Контекст, ИмяКнопки);
	

	оПоставщикДанных = СоздатьОбъект("VTProvider");
	оПоставщикДанных.УстТаблицуЗначений(тзДанные);
	Сам.ПоставщикДанных = оПоставщикДанных;
	
	сзРедактируемыеФлажки = СоздатьОбъект("СписокЗначений");
	
	тзРедактируемыеКолонки = СоздатьОбъект("ТаблицаЗначений");
	тзРедактируемыеКолонки.НоваяКолонка("Имя", "Строка");
	тзРедактируемыеКолонки.НоваяКолонка("ИмяПоляВвода", "Строка");
	тзРедактируемыеКолонки.НоваяКолонка("Тип", "Строка");
	тзРедактируемыеКолонки.НоваяКолонка("Длина", "Число");
	тзРедактируемыеКолонки.НоваяКолонка("Точность", "Число");
	тзРедактируемыеКолонки.НоваяКолонка("Флаги", "Строка");
	тзРедактируемыеКолонки.НоваяКолонка("ВыборГруппы", "Число");
	тзРедактируемыеКолонки.НоваяКолонка("Неотрицательный", "Число");
	
	фДанныеИзменены = 0;
КонецПроцедуры	// Инит
///******************************** Павел  01.12.2010

///******************************** ADirks 18.10.2012 ************
Процедура ПриЗаписи_фРазрешеноМенятьСортировку(НовЗнач)
	фРазрешеноМенятьСортировку = ?(НовЗнач=1, 1, 0);
КонецПроцедуры
///******************************** ADirks 18.10.2012 ************

///******************************** Павел  01.12.2010
Процедура УстановитьПоставщикаДанных(_тзДанные) Экспорт
	Сам = Сам(Контекст);
	
	нСтр = Сам.ТекущаяСтрока;
	
	тзДанные = _тзДанные;

	оПоставщикДанных = СоздатьОбъект("VTProvider");
	оПоставщикДанных.УстТаблицуЗначений(_тзДанные);
	Сам.ПоставщикДанных = оПоставщикДанных;
	
	фДанныеИзменены = 0;
	
	Если Сам.фПоказано() = 1 Тогда
		Сам.ОбновитьСтроки();
		Если ПустоеЗначение(нСтр) = 0 Тогда
			Сам.ТекущаяСтрока = нСтр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///******************************** Павел  01.12.2010

Функция НайтиОбъект(Объект) Экспорт
	Сам = Сам(Контекст); 
	Если ПустоеЗначение(Сам.ИмяКолонкиОбъект()) = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НайтиСтрокуТЗ(тзДанные, Сам.ИмяКолонкиОбъект(), Объект) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат тзДанные.НомерСтроки;
КонецФункции

///******************************** ADirks 20.02.2013 ************
Функция АктивизироватьСтроку(ИмяКолонки, Значение) Экспорт
	Сам = Сам(Контекст);
	
	Если НайтиСтрокуТЗ(тзДанные, ИмяКолонки, Значение) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Сам.ТекущаяСтрока = тзДанные.НомерСтроки;
	Возврат тзДанные.НомерСтроки;
КонецФункции
///******************************** ADirks 20.02.2013 ************

///******************************** ADirks 30.11.2012 ************
Процедура ПоказатьИтоги(стрКолонки) Экспорт
	Сам = Сам(Контекст);
	
	тзПодвал = СоздатьОбъект("ТаблицаЗначений");
	тзПодвал.Загрузить(тзДанные);
	тзПодвал.НоваяКолонка("_св_", "Строка");
	тзПодвал.Свернуть("_св_", стрКолонки);

	Сам.ПоказатьПодвал(тзПодвал);
КонецПроцедуры
///******************************** ADirks 30.11.2012 ************

///******************************** Павел  01.12.2010
//	ГорВыравнивание:
//		0, "А[вто]",	"A[uto]"	- автоматически
//		1, "Л[ево]",	"L[eft]"	- прижать влево
//		2, "П[право]",	"R[ight]"	- прижать вправо
//		3, "Ц[ентр]",	"C[enter]"	- центрировать
Функция ДобавитьКолонку(ИмяКолонки, Заголовок = -1, Знач ГорВыравнивание = 0, фДобавлятьВТЗ = 1, Ширина = -1) Экспорт //:КолонкаТабличногоПоля
	Сам = Сам(Контекст);
	
	Колонка = Сам.ПолучитьБазовыйКласс().ДобавитьКолонку(ИмяКолонки, Заголовок, ГорВыравнивание);
	Если Ширина <> -1 Тогда
		Колонка.Ширина = Ширина;
	КонецЕсли;
	
	Если фДобавлятьВТЗ = 1 Тогда
		тзДанные.НоваяКолонка(ИмяКолонки);
	КонецЕсли;
	
	Возврат Колонка;
КонецФункции	// ДобавитьКолонку
///******************************** Павел  01.12.2010

///******************************** ADirks 25.03.2012 ************
Процедура ДобавитьФлажок(ИмяКолонки, фРедактировать = 1) Экспорт
	Сам = Сам(Контекст);
	
	сзКол = СтрокуВСписок(ИмяКолонки, ",", 1);
	Для н = 1 По сзКол.РазмерСписка() Цикл
		Имя = сзКол.ПолучитьЗначение(н);
		Если фРедактировать = 1 Тогда
			сзРедактируемыеФлажки.ДобавитьЗначение(Имя);
		КонецЕсли;
		
		Сам.ПолучитьБазовыйКласс().ДобавитьФлажок(Имя);
	КонецЦикла;
КонецПроцедуры
///******************************** ADirks 25.03.2012 ************

///******************************** ADirks 13.08.2012 ************
Процедура ДобавитьРедактируемуюКолонку(Имя, ИмяПоляВвода, Знач Тип = -1, Знач Длина = 0, Знач Точность = 0) Экспорт
	Если НайтиСтрокуТЗ(тзРедактируемыеКолонки, "Имя", Имя) = 0 Тогда
		тзРедактируемыеКолонки.НоваяСтрока();
		тзРедактируемыеКолонки.Имя = Имя;
	КонецЕсли;
	тзРедактируемыеКолонки.ИмяПоляВвода = ИмяПоляВвода;
	
	Если Тип = -1 Тогда
		тзДанные.ПолучитьПараметрыКолонки(Имя, Тип, Длина, Точность);
		Если Длина = 0 Тогда
			Длина = 19;
		КонецЕсли;
		Если Точность = 0 Тогда
			Точность = 3;
		КонецЕсли;
	КонецЕсли;
	
	тзРедактируемыеКолонки.Тип = Тип;
	тзРедактируемыеКолонки.Длина = Длина;
	тзРедактируемыеКолонки.Точность = Точность;

	
	//Флаги:
	//dpDoNotTab 			0x00000004 	// пропускать при вводе
	//dpQuickChoice 		0x00000008 	// быстрый выбор
	//dpUseHelpString	 	0x00000010 	// использовать описание (в качестве подсказки)
	//dpHasButton			0x00000020 	// имеет кнопку выбора
	//dpDisableAutoChoice 	0x00000200 	// автовыбор выкл
	//dpUndefined		 	0x00100000 	// неопределенный тип (тип может быть назначен)
	
	//тзРедактируемыеКолонки.Флаги = "0x00000008";
	Если Лев(Тип, 6) <> "Строка" Тогда
		тзРедактируемыеКолонки.Флаги = "0x00000028";
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 13.08.2012 ************

///******************************** ADirks 24.08.2012 ************
Функция ВыборГруппы(Имя, флаг) Экспорт
	Если НайтиСтрокуТЗ(тзРедактируемыеКолонки, "Имя", Имя) = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	ПредФлаг = тзРедактируемыеКолонки.ВыборГруппы;
	тзРедактируемыеКолонки.ВыборГруппы = флаг;
	
	Возврат ПредФлаг;
КонецФункции
///******************************** ADirks 24.08.2012 ************

///******************************** Павел  27.08.2012
Функция Неотрицательный(Имя, флаг) Экспорт //:Число
	Если НайтиСтрокуТЗ(тзРедактируемыеКолонки, "Имя", Имя) = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	ПредФлаг = тзРедактируемыеКолонки.Неотрицательный;
	тзРедактируемыеКолонки.Неотрицательный = флаг;
	
	Возврат ПредФлаг;
КонецФункции
///******************************** Павел  27.08.2012

///******************************** ADirks 02.11.2012 ************
Процедура УстановитьТЗ(тз) Экспорт
	//тз//:ТаблицаЗначений
	Перем Заголовок, Ширина, Выравнивание;
	
	ДобавитьКолонку("НомерСтроки", "№",, 0, 5);
	Для нКол = 1 По тз.КоличествоКолонок() Цикл
		Имя = тз.ПолучитьПараметрыКолонки(нКол,,,, Заголовок, Ширина,, Выравнивание);
		Видимость = тз.ВидимостьКолонки(Имя);
		//Сообщить(Имя+", "+Видимость+", "+Ширина);
		
		Если Видимость = 1 Тогда
			Если Ширина = 0 Тогда
				Ширина = -1;
			КонецЕсли;
			КолТП = ДобавитьКолонку(Имя, Заголовок, Выравнивание, 0, Ширина);
			Если Ширина = -1 Тогда
				КолТП.Видимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	УстановитьПоставщикаДанных(тз);
КонецПроцедуры
///******************************** ADirks 02.11.2012 ************

///******************************** Павел  01.12.2010
Функция тзДанные() Экспорт
	Возврат тзДанные;
КонецФункции	// тзДанные
///******************************** Павел  01.12.2010

///******************************** ADirks 22.02.2012 ************
Функция ПолучитьЗначение(Знач нСтр = -1, ИмяКол) Экспорт
	Если нСтр = -1 Тогда
		нСтр = Сам(Контекст).ТекущаяСтрока;
	КонецЕсли;
	Возврат тзДанные.ПолучитьЗначение(нСтр, ИмяКол);
КонецФункции

Функция Получить(ИмяКол) Экспорт
	нСтр = Сам(Контекст).ТекущаяСтрока;
	Возврат тзДанные.ПолучитьЗначение(нСтр, ИмяКол);
КонецФункции
///******************************** ADirks 22.02.2012 ************

///******************************** ADirks 20.02.2013 ************
Процедура УстановитьЗначение(нСтр, ИмяКол, Значение) Экспорт
	тзДанные.УстановитьЗначение(нСтр, ИмяКол, Значение);
КонецПроцедуры

Процедура Установить(ИмяКол, Значение) Экспорт
	нСтр = Сам(Контекст).ТекущаяСтрока;
	тзДанные.УстановитьЗначение(нСтр, ИмяКол, Значение);
КонецПроцедуры
///******************************** ADirks 20.02.2013 ************

///******************************** ADirks 21.02.2013 ************
Функция сзВыделенныеСтроки(ИмяКол = "") Экспорт
	Сам = Сам(Контекст);
	сз = Сам.ПолучитьБазовыйКласс().сзВыделенныеСтроки();
	
	Если ИмяКол <> "" Тогда
		Для н = 1 По сз.РазмерСписка() Цикл
			нСтр = сз.ПолучитьЗначение(н);
			Значение = ПолучитьЗначение(нСтр, ИмяКол);
			сз.УстановитьЗначение(н, Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат сз;
КонецФункции
///******************************** ADirks 21.02.2013 ************

//_____________________________________________________________________________
Процедура Пометка(тзДанные, нСтр, ИмяКолонки, Знач Флажок = -1)
	Сам = Сам(Контекст);
	
	Коллбэк = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "Пометка");
	Если ПустаяСтрока(Коллбэк) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(нСтр);
		сзАрг.ДобавитьЗначение(ИмяКолонки);
		сзАрг.ДобавитьЗначение(Флажок);
		фРезультат = 0;
		оСервис.ВыполнитьФункцию(Сам.КонтекстФормы(), Коллбэк, сзАрг, фРезультат);
		Возврат;
	КонецЕсли;
	
	Если Флажок = -1 Тогда
		Флажок = тзДанные.ПолучитьЗначение(нСтр, ИмяКолонки);
		Флажок = (Флажок + 1) % 2;
	КонецЕсли;
	тзДанные.УстановитьЗначение(нСтр, ИмяКолонки, Флажок);
КонецПроцедуры

//_____________________________________________________________________________
Функция ПриВыбореФлажка(СтрТП, КолТП, ТипРегиона) Экспорт
	Сам = Сам(Контекст);
	
	ИмяКолонки = КолТП.Имя;
	Если сзРедактируемыеФлажки.НайтиЗначение(ИмяКолонки) = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипРегиона = 3 Тогда
		Флажок = тзДанные.ПолучитьЗначение(СтрТП, ИмяКолонки);
		Флажок = (Флажок + 1) % 2;
		
		Строки = Сам.ВыделенныеСтроки;
		Количество = Строки.Количество();
		Для н = 0 По Количество-1 Цикл
			СтрТП = Строки.Получить(н);
			Пометка(тзДанные, СтрТП, ИмяКолонки, Флажок);
		КонецЦикла;

	Иначе
		Пометка(тзДанные, СтрТП, ИмяКолонки);
	КонецЕсли;
	
	фДанныеИзменены = 1;
	
	Коллбэк_ПослеИзменения = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ПослеИзменения");
	Если ПустаяСтрока(Коллбэк_ПослеИзменения) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(СтрТП);
		сзАрг.ДобавитьЗначение(КолТП);
		сзАрг.ДобавитьЗначение(ТипРегиона);
		сзАрг.ДобавитьЗначение(тзДанные.ПолучитьЗначение(СтрТП, ИмяКолонки));
		оСервис.ВыполнитьПроцедуру(Сам.КонтекстФормы(), Коллбэк_ПослеИзменения, сзАрг);
	КонецЕсли;

	Сам.ОбновитьСтроки();
	
	Возврат 1;
КонецФункции

///******************************** Павел  20.12.2010
Процедура ПриРедактированииЗначения(Стр, Колонка, Регион, Значение) Экспорт
	Сам = Сам(Контекст);
	
	Если НайтиСтрокуТЗ(тзРедактируемыеКолонки, "Имя", Колонка.Имя) = 1 Тогда
		Если тзРедактируемыеКолонки.Неотрицательный = 1 Тогда
			Если ТипЗначения(Значение) = 1 Тогда
				Если Значение < 0 Тогда
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Коллбэк_Проверка = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ПроверитьРедактируемоеЗначение");
	Если ПустаяСтрока(Коллбэк_Проверка) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(Стр);
		сзАрг.ДобавитьЗначение(Колонка);
		сзАрг.ДобавитьЗначение(Регион);
		сзАрг.ДобавитьЗначение(Значение);
		фРезультат = 0;
		оСервис.ВыполнитьФункцию(Сам.КонтекстФормы(), Коллбэк_Проверка, сзАрг, фРезультат);
		Если фРезультат <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		Значение = сзАрг.ПолучитьЗначение(4);
	КонецЕсли;
	
	тзДанные.УстановитьЗначение(стр, Колонка.Имя, Значение);
	фДанныеИзменены = 1;

	Коллбэк_ПослеИзменения = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ПослеИзменения");
	Если ПустаяСтрока(Коллбэк_ПослеИзменения) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(Стр);
		сзАрг.ДобавитьЗначение(Колонка);
		сзАрг.ДобавитьЗначение(Регион);
		сзАрг.ДобавитьЗначение(Значение);
		оСервис.ВыполнитьПроцедуру(Сам.КонтекстФормы(), Коллбэк_ПослеИзменения, сзАрг);
	КонецЕсли;

	Сам.ОбновитьСтроки();
КонецПроцедуры	// ПриРедактированииЗначения
///******************************** Павел  20.12.2010

///******************************** ADirks 25.03.2012 ************
Процедура ПриОтменеРедактированияЗначения(нСтрТП, КолонкаТП, Регион)
КонецПроцедуры
///******************************** ADirks 25.03.2012 ************

///******************************** ADirks 13.08.2012 ************
Функция РедактироватьЗначение(нСтр, Колонка, ТипРегиона = 3, ТипОбластиЯчейки = 0) Экспорт
	Сам = Сам(Контекст);

	Если (фРедактированиеРазрешено <> 1) ИЛИ
		 (НайтиСтрокуТЗ(тзРедактируемыеКолонки, "Имя", Колонка.Имя) = 0 ) Тогда
		Возврат 0;
	КонецЕсли;
	
	Значение = Сам.Получить(Колонка.Имя);

	Коллбэк_Проверка = Сам.ИмяОбработчикаСобытия(ИмяКнопки, "ПриНачалеРедактированияЗначения");
	Если ПустаяСтрока(Коллбэк_Проверка) = 0 Тогда
		оСервис = СоздатьОбъект("Сервис");
		сзАрг = СоздатьОбъект("СписокЗначений");
		сзАрг.ДобавитьЗначение(нСтр);
		сзАрг.ДобавитьЗначение(Колонка);
		сзАрг.ДобавитьЗначение(ТипРегиона);
		сзАрг.ДобавитьЗначение(Значение);
		фРезультат = 0;
		оСервис.ВыполнитьФункцию(Сам.КонтекстФормы(), Коллбэк_Проверка, сзАрг, фРезультат);
		Если фРезультат <> 1 Тогда
			Возврат 0;
		КонецЕсли;
		
		Значение = сзАрг.ПолучитьЗначение(4);
	КонецЕсли;
	
	
	Сам.ПолучитьБазовыйКласс().РедактироватьЗначение(нСтр, Колонка, ТипРегиона, 
		Значение, тзРедактируемыеКолонки.Длина, тзРедактируемыеКолонки.Точность,
		тзРедактируемыеКолонки.ИмяПоляВвода, тзРедактируемыеКолонки.Флаги
	);
	
	Если тзРедактируемыеКолонки.ВыборГруппы = 1 Тогда
		Атр = Сам.КонтекстФормы().Форма.ПолучитьАтрибут(тзРедактируемыеКолонки.ИмяПоляВвода);
		Атр.ВыборГруппы(1);
	КонецЕсли;

	Возврат 1;
КонецФункции
///******************************** ADirks 13.08.2012 ************

///******************************** ADirks 08.11.2012 ************
Функция ПерейтиКПервойОтличающейсяСтроке(Шаг = 1) Экспорт
	Сам = Сам(Контекст);
	нСтр = Сам.ТекущаяСтрока;
	ИмяКол = Сам.ТекущаяКолонка.Имя;
	ТекЗнач = Сам.ПолучитьЗначение(нСтр, ИмяКол);
	
	КоличествоСтрок = тзДанные.КоличествоСтрок();
	фНайдено = 0;
	Пока фНайдено=0 Цикл
		нСтр = нСтр + Шаг;
		
		Если ( нСтр <= 0 ) ИЛИ ( нСтр > КоличествоСтрок ) Тогда
			Прервать;
		КонецЕсли;
		
		Значение = Сам.ПолучитьЗначение(нСтр, ИмяКол);
		Если Значение <> ТекЗнач Тогда
			фНайдено = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если фНайдено = 1 Тогда
		Сам.ТекущаяСтрока = нСтр;
		Возврат нСтр;
	КонецЕсли;
	
	Возврат 0;
КонецФункции
///******************************** ADirks 08.11.2012 ************

///******************************** ADirks 26.12.2012 ************
Процедура ПрименитьСортировку() Экспорт
	Сам = Сам(Контекст);
	
	Для н = 0 По Сам.Колонки.Количество() - 1 Цикл
		Сам.Колонки.Получить(н).ЗнакУпорядочивания = 0;
	КонецЦикла;
	
	стрСорт = ""; зпт = "";
	нЗначек = 0;
	тзСортировка.ВыбратьСтроки();
	Пока тзСортировка.ПолучитьСтроку() = 1 Цикл
		ЗнакУпорядочивания = (нЗначек*2) + ?(тзСортировка.Направление>0, 1, 2);
		Если нЗначек < 2 Тогда
			нЗначек = нЗначек + 1;
		КонецЕсли;
		Сам.Колонки.Получить(тзСортировка.Имя).ЗнакУпорядочивания = ЗнакУпорядочивания;
		
		стрСорт = стрСорт + зпт + тзСортировка.Имя+?(тзСортировка.Направление=-1, "-", "");
		зпт = ",";
	КонецЦикла;
	
	тзДанные.Сортировать(стрСорт, 1);
	Сам.ОбновитьСтроки();
КонецПроцедуры
///******************************** ADirks 26.12.2012 ************

///******************************** ADirks 19.10.2012 ************
Процедура Сортировать(Колонка, Направление, Добавить = 0) Экспорт
	Сам = Сам(Контекст);
	
	Если Колонка = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли;
	
	Если Добавить <> 1 Тогда
		тзСортировка.УдалитьСтроки();
	КонецЕсли;
	Если НайтиСтрокуТЗ(тзСортировка, "Имя", Колонка) = 0 Тогда
		тзСортировка.НоваяСтрока();
		тзСортировка.Имя = Колонка;
	КонецЕсли;
	тзСортировка.Направление = Направление;
	
	Сам.ПрименитьСортировку();
КонецПроцедуры
///******************************** ADirks 19.10.2012 ************

///******************************** ADirks 18.10.2012 ************
Процедура ПриВыбореЗаголовка(Колонка) Экспорт
	Сам = Сам(Контекст);
	
	Если фРазрешеноМенятьСортировку <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Клавиатура = СоздатьОбъект("1cpp.Клавиатура");
		Ктрл = Клавиатура.ПолучитьСостояниеКлавиши(Сам.VK_CTRL);
	Исключение
		Ктрл = 0;
	КонецПопытки;
	
	Если Ктрл = 0 Тогда
		н = тзСортировка.КоличествоСтрок();
		Пока н > 0 Цикл
			Если тзСортировка.ПолучитьЗначение(н, "Имя") <> Колонка.Имя Тогда
				тзСортировка.УдалитьСтроку(н);
			КонецЕсли;
			н = н - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если НайтиСтрокуТЗ(тзСортировка, "Имя", Колонка.Имя) = 1 Тогда
		Сортировать(Колонка.Имя, тзСортировка.Направление * (-1), 1);
	Иначе
		Сортировать(Колонка.Имя, 1, 1);
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 18.10.2012 ************

///******************************** ADirks 13.08.2012 ************
Функция ВыборСтроки(нСтр, Колонка, ТипРегиона, ТипОбластиЯчейки) Экспорт
	Сам = Сам(Контекст);
	
	Если ПриВыбореФлажка(нСтр, Колонка, ТипРегиона) = 1 Тогда //При нажатии Enter на колонку флажков имитируем выбор флажка
		Возврат 1;
	ИначеЕсли РедактироватьЗначение(нСтр, Колонка, ТипРегиона, ТипОбластиЯчейки) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат Сам.ПолучитьБазовыйКласс().ВыборСтроки(нСтр, Колонка, ТипРегиона, ТипОбластиЯчейки);
КонецФункции
///******************************** ADirks 13.08.2012 ************

///******************************** ADirks 13.08.2012 ************
Функция _ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО) Экспорт
	Сам = Сам(Контекст);
	
	Если Сам.фАктивныйЭлемент() = 1 Тогда
		Если Код = Сам.VK_SPACE Тогда
			Если ПустоеЗначение(Сам.ТекущаяКолонка) = 0 Тогда
				ИмяКолонки = Сам.ТекущаяКолонка.Имя;
				Если сзРедактируемыеФлажки.НайтиЗначение(ИмяКолонки) > 0 Тогда
					ПриВыбореФлажка(Сам.ТекущаяСтрока, Сам.ТекущаяКолонка, 3);
					Возврат 1;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (Код = Сам.VK_DOWN) ИЛИ (Код = Сам.VK_UP) Тогда
			Если (Ктрл=1) И (Альт=0) И (Шифт=0) Тогда
				ФСО = 0;
				Шаг = ?(Код = Сам.VK_UP, -1, 1);
				ПерейтиКПервойОтличающейсяСтроке(Шаг);
			КонецЕсли;
			
		ИначеЕсли (Код = Сам.VK_F4) И (Ктрл=1) И (Шифт=1) И (Альт=0) Тогда
			//ФСО = 0;
			//РедакторТЗ(тзДанные(), ИмяКнопки);
			//Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сам(Контекст).ПолучитьБазовыйКласс()._ПриНажатииКнопкиКлавиатуры(Код, Альт, Шифт, Ктрл, Символ, ФСО);
КонецФункции	// ПриОтжатииКнопкиКлавиатуры
///******************************** ADirks 13.08.2012 ************

///******************************** Павел  23.08.2012
Функция НоваяСтрока(сзЗначенияПоУмолчанию = "", НачатьРедактированиеКолонки = "") Экспорт
	Сам = Сам(Контекст);
	тзДанные.НоваяСтрока();
	нСтр = тзДанные.НомерСтроки;
	фДанныеИзменены = 1;
	
	Если ТипЗначенияСтр(сзЗначенияПоУмолчанию) = "СписокЗначений" Тогда
		Для й = 1 По тзДанные.КоличествоКолонок() Цикл
			ИмяКолонки = тзДанные.ПолучитьПараметрыКолонки(й);
			Значение = сзЗначенияПоУмолчанию.Получить(ИмяКолонки);
			Если Значение <> Неопределено Тогда
				тзДанные.УстановитьЗначение(нСтр, ИмяКолонки, Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Сам.ТекущаяСтрока = нСтр;
	Сам.ОбновитьСтроки();
	
	Если ПустаяСтрока(НачатьРедактированиеКолонки) = 0 Тогда
		Колонка = Сам.Колонки.Получить(НачатьРедактированиеКолонки);
		Если Колонка.Видимость = 0 Тогда
			Возврат нСтр;
		КонецЕсли;
		
		РедактироватьЗначение(нСтр, Колонка);
	КонецЕсли;
	
	Возврат нСтр;
КонецФункции
///******************************** Павел  23.08.2012

///******************************** ADirks 24.08.2012 ************
Функция ДобавитьСтроку() Экспорт
	Если фРедактированиеРазрешено = 1 Тогда
		КолонкаРедактирования = Неопределено;
		Если тзРедактируемыеКолонки.КоличествоСтрок() > 0 Тогда
			КолонкаРедактирования = тзРедактируемыеКолонки.ПолучитьЗначение(1, "Имя");
		КонецЕсли;
		
		НоваяСтрока(, КолонкаРедактирования);
	КонецЕсли;
	
	Возврат 1;
КонецФункции
///******************************** ADirks 24.08.2012 ************

Функция УдалитьСтроку() Экспорт
	Если фРедактированиеРазрешено = 1 Тогда
		Сам = Сам(Контекст);
		Если ПустоеЗначение(Сам.ТекущаяСтрока) = 1 Тогда
			Возврат 1;
		КонецЕсли;
		фДанныеИзменены = 1;
		тзДанные.УдалитьСтроку(Сам.ТекущаяСтрока);
		Сам.ОбновитьСтроки();
		Сам.КонтекстФормы().Форма.Обновить(1);
	КонецЕсли;
	
	Возврат 1;
КонецФункции

///******************************** Павел  24.10.2011
Функция ВывестиСписок() Экспорт
	Сам = Сам(Контекст);
	
	тзСписок = тзДанные;
	КолвоСтрок = тзСписок.КоличествоСтрок();
	
	РазмерШрифта = 10;
	Таб = СоздатьОбъект("Таблица");
	Таб.Область().РазмерШрифта(РазмерШрифта);
	
	НомерКолонки = 0;
	Для й = 1 По Сам.Колонки.Количество() Цикл
		Колонка = Сам.Колонки.Получить(й - 1);
		ИмяКолонки = Колонка.Имя;
		
		Если ( Колонка.Видимость = 0 ) ИЛИ ( ЕстьКолонкаТЗ(тзСписок, Колонка.Имя) = 0 ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустоеЗначение(Колонка.Заголовок) = 0 Тогда
			ЗаголовокКолонки = Колонка.Заголовок;
		Иначе
			ЗаголовокКолонки = Колонка.Имя;
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		МаксДлинаСтроки = 0;
		
		Для ц = 1 По КолвоСтрок Цикл
			Значение = тзСписок.ПолучитьЗначение(ц, Колонка.Имя);
			Если ТипЗначения(Значение) = 3 Тогда
				Если Значение = '01.01.1753' Тогда
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
			Обл			= Таб.Область(ц + 1, НомерКолонки);
			Обл.Текст	= Значение;
			Обл.Расшифровка(Значение);
			Обл.Рамка(0, 0, 3, 3);
			
			МаксДлинаСтроки = Макс(СтрДлина(Значение), МаксДлинаСтроки);
		КонецЦикла;
		
		МаксДлинаСтроки = Макс(СтрДлина(ЗаголовокКолонки), 0.9 * МаксДлинаСтроки);
		
		ОблШ		= Таб.Область(1, НомерКолонки);
		ОблШ.Текст	= ЗаголовокКолонки;
		ОблШ.Полужирный(1);
		ОблШ.Рамка(0, 3, 3, 3);
		ОблШ.ШиринаСтолбца(МаксДлинаСтроки * РазмерШрифта/8 + 1);
	КонецЦикла;
	
	Таб.Опции(0, 0, 1, 0);
	Таб.ТолькоПросмотр(1);
	Таб.Показать();

	Возврат 1;
КонецФункции	// ВывестиСписок
///******************************** Павел  24.10.2011

///******************************** ADirks 12.10.2012 ************
Процедура ЗаполнитьМеню(сзМеню) Экспорт

	Сам = Сам(Контекст);
	Значение = Сам.ЗначениеТекущейЯчейки();
	Если (ТипЗначения(Значение) = 11) ИЛИ (ТипЗначения(Значение) = 12) Тогда		
		сзМеню.ДобавитьЗначение("ВыбратьПоЗначению", "Выбрать по значению = "+Значение);
		//сзМеню.ДобавитьЗначение("------");
	КонецЕсли;	
	
	Сам.ПолучитьБазовыйКласс().ЗаполнитьМеню(сзМеню);
	
	сзМеню.ДобавитьЗначение("------");
	сзМеню.ДобавитьЗначение("ВывестиСписок", "Вывести список");
		
КонецПроцедуры

Функция ПриВыбореМеню(Действие) Экспорт
	Сам = Сам(Контекст);
	
	Если Действие = "ВывестиСписок" Тогда
		Сам.ВывестиСписок();
		Возврат 1;
	ИначеЕсли Действие = "ВыбратьПоЗначению" Тогда
		Сам = Сам(Контекст);
		Значение = Сам.ЗначениеТекущейЯчейки();
		//Если (ТипЗначения(Значение) = 11) ИЛИ (ТипЗначения(Значение) = 12) Тогда
		//	сзМеню.ДобавитьЗначение("------");
		//	сзМеню.ДобавитьЗначение("ВыбратьПоЗначению", "Выбрать в списке = "+Значение);
		//КонецЕсли;			
		ИмяКолонки = Сам.ТекущаяКолонка.Имя;
		тз = Сам.ПоставщикДанных.ТаблицаЗначений;
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			Если ( тз.ПолучитьЗначение(тз.НомерСтроки, ИмяКолонки)=Значение ) Тогда 
				тз.Пометка = 1;
			КонецЕсли;
		КонецЦикла;
		Сам.ОбновитьСтроки();
		
	КонецЕсли;
	
	Возврат Сам.ПолучитьБазовыйКласс().ПриВыбореМеню(Действие);
КонецФункции
///******************************** ADirks 12.10.2012 ************

Процедура ПриАктивизацииСтроки() Экспорт
	Сам = Сам(Контекст);
	тз = Сам.тзДанные();
	тз.ТекущаяСтрока(Сам.ТекущиеДанные.НомерСтроки);
	тз.ПолучитьСтрокуПоНомеру(Сам.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

Процедура ПриАктивизацииКолонки() Экспорт
	Сам = Сам(Контекст);
	тз = Сам.тзДанные();
	тз.ТекущаяКолонка(Сам.ТекущаяКолонка.Имя);
КонецПроцедуры
