
Перем Неопределено;

Перем КонтекстФормы;
Перем ВидСпр;

Перем тзНастройки;

Перем тзСортировки;
Перем ТекущаяСортировка;

Перем фУстановленОтбор;
//===========================================================

//--------------------------------------------------------------------
/// События, которые нужно транслировать из формы в данный класс
///   - ПриНачалеВыбораЗначения(Имя, ФСО)
///   - _ПриОтжатииЛевойКнопки(Сост, Лево, Верх, ФСО)
///
///
//--------------------------------------------------------------------



Функция Сам(Конт)
	Возврат Конт;
КонецФункции

Функция База()
	Возврат Сам(Контекст).ПолучитьБазовыйКласс();
КонецФункции


///******************************** ADirks 28.11.2019 ************
Процедура ДобавитьСортировку(Имя, ВыражениеСКЛ, ВыражениеДБФ, ДжойныСКЛ, ДжойныДБФ) Экспорт
	Сам = Сам(Контекст);
	
	Если Сам.НайтиСтрокуТЗ(тзСортировки, "Имя", Имя) = 0 Тогда
		тзСортировки.НоваяСтрока();
		тзСортировки.Имя = Имя;
	КонецЕсли;
	
	тзСортировки.ВыражениеСКЛ = ВыражениеСКЛ;
	тзСортировки.ВыражениеДБФ = ВыражениеДБФ;
	
	тзСортировки.ДжойныСКЛ = ДжойныСКЛ;
	тзСортировки.ДжойныДБФ = ДжойныДБФ;
КонецПроцедуры
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура Конструктор()
	тзНастройки = СоздатьОбъект("ТаблицаЗначений");
	тзНастройки.НоваяКолонка("Имя", "Строка");
	тзНастройки.НоваяКолонка("ИмяКолонки", "Строка");
	
	тзСортировки = СоздатьОбъект("ТаблицаЗначений");
	тзСортировки.НоваяКолонка("Имя", "Строка");
	тзСортировки.НоваяКолонка("ВыражениеСКЛ", "Строка");
	тзСортировки.НоваяКолонка("ВыражениеДБФ", "Строка");
	тзСортировки.НоваяКолонка("ДжойныСКЛ", "Строка");
	тзСортировки.НоваяКолонка("ДжойныДБФ", "Строка");
	
	ДобавитьСортировку("Наименование", "Спр.Descr", "Спр.Descr", , );
	ТекущаяСортировка = "Наименование";
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура Инит(Конт, ИмяКонтрола, _ВидСпр) Экспорт
	Сам = Сам(Контекст);
	База = База(); //:Меркурий.ТабличноеПоле.Фильтр
	
	КонтекстФормы = Конт;
	ВидСпр = _ВидСпр;
	ПрефиксНастроек = ВидСпр+"_ФС";
	
	База.Инит(Конт, ИмяКонтрола, ПрефиксНастроек);
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Процедура ДобавитьПоКолонке(Имя, Представление = "") Экспорт
	Сам = Сам(Контекст);
	База = База();
	
	Если Имя = "Наименование" Тогда
		Тип = "Строка";
		Если ПустаяСтрока(Представление) = 1 Тогда
			Представление = Имя;
		КонецЕсли;
		ВыражениеСКЛ = "Спр.DESCR";
	Иначе
		МетаРекв = Метаданные.Справочник(ВидСпр).Реквизит(Имя);
		Тип = МетаРекв.Тип;
		Если ПустоеЗначение(МетаРекв.Вид) = 0 Тогда
			Тип = Тип+"."+МетаРекв.Вид;
		КонецЕсли;
		Если ПустаяСтрока(Представление) = 1 Тогда
			Представление = МетаРекв.Представление();
		КонецЕсли;

		ВыражениеСКЛ = "$Спр."+Имя;
	КонецЕсли;
	
	База.Добавить(Имя, Представление, Тип, ВыражениеСКЛ);
	Если Имя <> "Наименование" Тогда
		Сам.СвязаннаяКолонка(Имя, Имя);
	КонецЕсли;
КонецПроцедуры
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Функция Сортировка(Имя = -1) Экспорт
	Сам = Сам(Контекст);
	
	Если Имя <> -1 Тогда
		Если Сам.НайтиСтрокуТЗ(тзСортировки, "Имя", Имя) = 1 Тогда
			ТекущаяСортировка = тзСортировки.Имя;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяСортировка;
КонецФункции
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Функция тзп_Сортировка(Имя)
	Сам = Сам(Контекст);
	
	Сортировка = "Спр.Descr";
	
	Если Сам.НайтиСтрокуТЗ(тзСортировки, "Имя", Имя) = 0 Тогда
		Возврат Сортировка;
	КонецЕсли;
	
	ЭтоSQL = ГМ.ЭтоSQL;
	Если ЭтоSQL = 1 Тогда
		Если ПустоеЗначение(тзСортировки.ВыражениеСКЛ) = 0 Тогда
			Сортировка = тзСортировки.ВыражениеСКЛ;
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(тзСортировки.ВыражениеДБФ) = 0 Тогда
			Сортировка = тзСортировки.ВыражениеДБФ;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Сортировка;
КонецФункции
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 28.11.2019 ************
Функция тзп_ДжойныСортировки(Имя)
	Сам = Сам(Контекст);
	Джойны = "";
	
	Если Сам.НайтиСтрокуТЗ(тзСортировки, "Имя", Имя) = 0 Тогда
		Возврат "";
	КонецЕсли;

	ЭтоSQL = ГМ.ЭтоSQL;
	Если ЭтоSQL = 1 Тогда
		Если ПустоеЗначение(тзСортировки.ДжойныСКЛ) = 0 Тогда
			Джойны = тзСортировки.ДжойныСКЛ;
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(тзСортировки.ДжойныДБФ) = 0 Тогда
			Джойны = тзСортировки.ДжойныДБФ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Джойны;
КонецФункции
///******************************** ADirks 28.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура УстановитьОтбор() Экспорт
	Сам = Сам(Контекст);
	
	Состояние("обновляю ...");

	ЭтоSQL = ГМ.ЭтоSQL;
	фЕстьФильтр = Сам.фЕстьФильтр();
	
	Если фЕстьФильтр = 1 Тогда
		Если ЭтоSQL = 1 Тогда
			ТекстЗапроса = "Set NoCount ON
			|SELECT
			|	Спр.ID [эл $Справочник."+ВидСпр+"]
			|FROM
			|	$Справочник."+ВидСпр+" as Спр
			|	"+Сам.JOIN()+"
			|	"+тзп_ДжойныСортировки(ТекущаяСортировка)+"
			|
			|"+Сам.WHERE()+"
			|
			|GROUP BY
			|	Спр.ID, "+тзп_Сортировка(ТекущаяСортировка)+"
			|ORDER BY
			|	"+тзп_Сортировка(ТекущаяСортировка)+"
			|";
		Иначе
			ТекстЗапроса = "
			|SELECT
			|	Спр.ID as [эл :Справочник."+ВидСпр+"]
			|FROM
			|	[Справочник."+ВидСпр+"] as Спр
			|	"+Сам.JOIN()+"
			|	"+тзп_ДжойныСортировки(ТекущаяСортировка)+"
			|
			|"+Сам.WHERE()+"
			|
			|GROUP BY
			|	Спр.ID, "+тзп_Сортировка(ТекущаяСортировка)+"
			|ORDER BY
			|	"+тзп_Сортировка(ТекущаяСортировка)+"
			|";
		КонецЕсли;
		
		
		сзЭлементы = СоздатьОбъект("СписокЗначений");
		Если ЭтоSQL = 1 Тогда
			//ГМ.RS.Отладка(1);
			ГМ.RS.ВыполнитьИнструкцию(ТекстЗапроса, сзЭлементы); 
		Иначе
			Запрос = ГМ.базаДанных.НовыйЗапрос();
			тз = Запрос.ВыполнитьЗапрос(ТекстЗапроса);
			тз.Выгрузить(сзЭлементы,,,1);
		КонецЕсли;
		
		фУстановленОтбор = 1;

		текЭлемент = КонтекстФормы.ТекущийЭлемент();
		КонтекстФормы.ИспользоватьСписокЭлементов(сзЭлементы);
		КонтекстФормы.Форма.Обновить();
		Попытка
			КонтекстФормы.АктивизироватьОбъект(текЭлемент);
		Исключение
		КонецПопытки;
		
	Иначе
		Если фУстановленОтбор = 1 Тогда 
			текЭлемент = КонтекстФормы.ТекущийЭлемент();
			КонтекстФормы.ИспользоватьСписокЭлементов();
			КонтекстФормы.Форма.Обновить();

			Попытка
				КонтекстФормы.АктивизироватьОбъект(текЭлемент);
			Исключение
			КонецПопытки;
		КонецЕсли;
		УстановленОтбор = 0;
	КонецЕсли;

	Состояние("");
КонецПроцедуры 
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 26.11.2019 ************
Функция СвязаннаяКолонка(Имя, НовИмяКолонки = -1) Экспорт
	нСтр = 0;
	Если тзНастройки.НайтиЗначение(Имя, нСтр, "Имя") = 0 Тогда
		тзНастройки.НоваяСтрока();
		тзНастройки.Имя = Имя;
	Иначе
		тзНастройки.ПолучитьСтрокуПоНомеру(нСтр);
	КонецЕсли;
	
	Если НовИмяКолонки <> -1 Тогда
		тзНастройки.ИмяКолонки = НовИмяКолонки;
	КонецЕсли;
	
	Возврат тзНастройки.ИмяКолонки;
КонецФункции
///******************************** ADirks 26.11.2019 ************


///******************************** ADirks 26.11.2019 ************
Функция ЗначениеКолонкиФормы(ИмяФильтра) Экспорт
	СвязаннаяКолонка = СвязаннаяКолонка(ИмяФильтра);
	Если ПустоеЗначение(СвязаннаяКолонка) = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстМодуля = "
	|Функция ЗначениеКол()
	|	Возврат ТекущийЭлемент()."+СвязаннаяКолонка+";
	|КонецФункции
	|";
	
	Модуль = СоздатьОбъект("ВыполняемыйМодуль");
	Модуль.УстановитьМодуль(ТекстМодуля);
	Модуль.НазначитьКонтекст(КонтекстФормы);
	Модуль.КомпилироватьМодуль();
	Модуль.ВыполнитьМодуль();
	
	Возврат Модуль.ЗначениеКол();
КонецФункции
///******************************** ADirks 26.11.2019 ************

///******************************** ADirks 06.12.2019 ************
Функция сзКомандаМеню(Имя, Значение)
	сзКоманда = СоздатьОбъект("СписокЗначений");
	сзКоманда.Установить("Имя", Имя);
	сзКоманда.Установить("Значение", Значение);
	Возврат сзКоманда;
КонецФункции
///******************************** ADirks 06.12.2019 ************

///******************************** ADirks 26.11.2019 ************
Процедура ЗаполнитьМеню(сзМеню, ТипРегиона, Колонка, Стр) Экспорт
	Сам = Сам(Контекст); //:Меркурий.ТабличноеПоле.Фильтр
	
	Если ТипРегиона = Сам.ТипРегиона_Заголовок() Тогда
		тзНастройки.ВыбратьСтроки();
		Пока тзНастройки.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(тзНастройки.ИмяКолонки) = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Имя = тзНастройки.Имя;
			Представление = ""+Сам.Представление(Имя);
			Значение = ЗначениеКолонкиФормы(Имя);
			Если Значение <> Неопределено Тогда
				сзМеню.ДобавитьЗначение(сзКомандаМеню(Имя, Значение), Представление+":  Отбор по <"+Значение+">");
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипРегиона = Сам.ТипРегиона_Строки() Тогда
		Имя = Сам.ТекущиеДанные.Имя;
		Значение = ЗначениеКолонкиФормы(Имя);
		Если Значение <> Неопределено Тогда
			сзМеню.ДобавитьЗначение(сзКомандаМеню(Имя, Значение), "Отбор по <"+Значение+">");
		КонецЕсли;
		
		сзИстория = Сам.сзИсторияЗначения(Имя);
		Если сзИстория <> Неопределено Тогда
			Если сзМеню.РазмерСписка() > 0 Тогда
				сзМеню.ДобавитьЗначение("", "---------------------------");
			КонецЕсли;
			Для нИст = 1 По сзИстория.РазмерСписка() Цикл
				ЗнИст = сзИстория.ПолучитьЗначение(нИст);
				сзМеню.ДобавитьЗначение(сзКомандаМеню(Имя, ЗнИст), ""+ЗнИст);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///******************************** ADirks 26.11.2019 ************
Функция ПриВыбореМеню(сзКоманда) Экспорт
	Сам = Сам(Контекст);
	
	Если ТипЗначенияСтр(сзКоманда) <> "СписокЗначений" Тогда
		Возврат 0;
	КонецЕсли;
	
	Имя = сзКоманда.Получить("Имя");
	Значение = сзКоманда.Получить("Значение");
	
	Сам.Значение(Имя, Значение);
	Сам.УстановитьОтбор();
	
	Возврат 1;
КонецФункции
///******************************** ADirks 26.11.2019 ************


Процедура ПриКонтекстномМеню(ТипРегиона, Колонка, Стр) Экспорт
	Сам = Сам(Контекст);
	
	сзМеню = СоздатьОбъект("СписокЗначений");
	
	Сам.ЗаполнитьМеню(сзМеню, ТипРегиона, Колонка, Стр);
	
	Действие = "";
	Если сзМеню.ВыбратьЗначение(Действие,,,, 1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	

	Сам.ПриВыбореМеню(Действие);
КонецПроцедуры
///******************************** ADirks 26.11.2019 ************
